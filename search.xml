<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ESLint参考配置</title>
    <url>/2020/11/18/ESLint%E5%8F%82%E8%80%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>太长不在首页展示</p>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 禁止 for 循环出现方向错误的循环，比如 for (i = 0; i &lt; 10; i--)</span></span><br><span class="line"><span class="string">'for-direction'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// getter 必须有返回值，并且禁止返回空，比如 return;</span></span><br><span class="line"><span class="string">'getter-return'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        allowImplicit: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// 禁止将 await 写在循环里，因为这样就无法同时发送多个异步请求了</span></span><br><span class="line"><span class="comment">// @off 要求太严格了，有时需要在循环中写 await</span></span><br><span class="line"><span class="string">'no-await-in-loop'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止与负零进行比较</span></span><br><span class="line"><span class="string">'no-compare-neg-zero'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止在测试表达式中使用赋值语句，除非这个赋值语句被括号包起来了</span></span><br><span class="line"><span class="string">'no-cond-assign'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'except-parens'</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// 禁止使用 console</span></span><br><span class="line"><span class="comment">// @off console 的使用很常见</span></span><br><span class="line"><span class="string">'no-console'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止将常量作为分支条件判断中的测试表达式，但允许作为循环条件判断中的测试表达式</span></span><br><span class="line"><span class="string">'no-constant-condition'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        checkLoops: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// 禁止在正则表达式中出现 Ctrl 键的 ASCII 表示，即禁止使用 /\x1f/</span></span><br><span class="line"><span class="comment">// @off 几乎不会遇到这种场景</span></span><br><span class="line"><span class="string">'no-control-regex'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 禁止使用 debugger</span></span><br><span class="line"><span class="string">'no-debugger'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止在函数参数中出现重复名称的参数</span></span><br><span class="line"><span class="string">'no-dupe-args'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止在对象字面量中出现重复名称的键名</span></span><br><span class="line"><span class="string">'no-dupe-keys'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止在 switch 语句中出现重复测试表达式的 case</span></span><br><span class="line"><span class="string">'no-duplicate-case'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止出现空代码块，允许 catch 为空代码块</span></span><br><span class="line"><span class="string">'no-empty'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        allowEmptyCatch: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// 禁止在正则表达式中使用空的字符集 []</span></span><br><span class="line"><span class="string">'no-empty-character-class'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止将 catch 的第一个参数 error 重新赋值</span></span><br><span class="line"><span class="string">'no-ex-assign'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// @fixable 禁止不必要的布尔类型转换，比如 !! 或 Boolean</span></span><br><span class="line"><span class="string">'no-extra-boolean-cast'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// @fixable 禁止函数表达式中出现多余的括号，比如 let foo = (function () &#123; return 1 &#125;)</span></span><br><span class="line"><span class="string">'no-extra-parens'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'functions'</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable 禁止出现多余的分号</span></span><br><span class="line"><span class="string">'no-extra-semi'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止将一个函数声明重新赋值，如：</span></span><br><span class="line"><span class="comment">// function foo() &#123;&#125;</span></span><br><span class="line"><span class="comment">// foo = bar</span></span><br><span class="line"><span class="string">'no-func-assign'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止在 if 代码块内出现函数声明</span></span><br><span class="line"><span class="string">'no-inner-declarations'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'both'</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// 禁止在 RegExp 构造函数中出现非法的正则表达式</span></span><br><span class="line"><span class="string">'no-invalid-regexp'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止使用特殊空白符（比如全角空格），除非是出现在字符串、正则表达式或模版字符串中</span></span><br><span class="line"><span class="string">'no-irregular-whitespace'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        skipStrings: <span class="literal">true</span>,</span><br><span class="line">        skipComments: <span class="literal">false</span>,</span><br><span class="line">        skipRegExps: <span class="literal">true</span>,</span><br><span class="line">        skipTemplates: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// 禁止将 Math, JSON 或 Reflect 直接作为函数调用</span></span><br><span class="line"><span class="string">'no-obj-calls'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止使用 hasOwnProperty, isPrototypeOf 或 propertyIsEnumerable</span></span><br><span class="line"><span class="comment">// @off hasOwnProperty 比较常用</span></span><br><span class="line"><span class="string">'no-prototype-builtins'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 禁止在正则表达式中出现连续的空格，必须使用 /foo &#123;3&#125;bar/ 代替</span></span><br><span class="line"><span class="string">'no-regex-spaces'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止在数组中出现连续的逗号，如 let foo = [,,]</span></span><br><span class="line"><span class="string">'no-sparse-arrays'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止在普通字符串中出现模版字符串里的变量形式，如 'Hello $&#123;name&#125;!'</span></span><br><span class="line"><span class="string">'no-template-curly-in-string'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止出现难以理解的多行表达式，如：</span></span><br><span class="line"><span class="comment">// let foo = bar</span></span><br><span class="line"><span class="comment">// [1, 2, 3].forEach(baz);</span></span><br><span class="line"><span class="string">'no-unexpected-multiline'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止在 return, throw, break 或 continue 之后还有代码</span></span><br><span class="line"><span class="string">'no-unreachable'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止在 finally 中出现 return, throw, break 或 continue</span></span><br><span class="line"><span class="string">'no-unsafe-finally'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// @fixable 禁止在 in 或 instanceof 操作符的左侧使用感叹号，如 if (!key in object)</span></span><br><span class="line"><span class="string">'no-unsafe-negation'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 必须使用 isNaN(foo) 而不是 foo === NaN</span></span><br><span class="line"><span class="string">'use-isnan'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 注释必须符合 jsdoc 的规范</span></span><br><span class="line"><span class="comment">// @off jsdoc 要求太严格</span></span><br><span class="line"><span class="string">'valid-jsdoc'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// typeof 表达式比较的对象必须是 'undefined', 'object', 'boolean', 'number', 'string', 'function' 或 'symbol'</span></span><br><span class="line"><span class="string">'valid-typeof'</span>: <span class="string">'error'</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 最佳实践</span></span><br><span class="line"><span class="comment">// 这些规则通过一些最佳实践帮助你避免问题</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// setter 必须有对应的 getter，getter 可以没有对应的 setter</span></span><br><span class="line"><span class="string">'accessor-pairs'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        setWithoutGet: <span class="literal">true</span>,</span><br><span class="line">        getWithoutSet: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// 数组的方法除了 forEach 之外，回调函数必须有返回值</span></span><br><span class="line"><span class="string">'array-callback-return'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 将 var 定义的变量视为块作用域，禁止在块外使用</span></span><br><span class="line"><span class="string">'block-scoped-var'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 在类的非静态方法中，必须存在对 this 的引用</span></span><br><span class="line"><span class="comment">// @off 太严格了</span></span><br><span class="line"><span class="string">'class-methods-use-this'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止函数的循环复杂度超过 20，https://en.wikipedia.org/wiki/Cyclomatic_complexity</span></span><br><span class="line"><span class="string">'complexity'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        max: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// 禁止函数在不同分支返回不同类型的值</span></span><br><span class="line"><span class="comment">// @off 太严格了</span></span><br><span class="line"><span class="string">'consistent-return'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable if 后面必须要有 &#123;，除非是单行 if</span></span><br><span class="line"><span class="string">'curly'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'multi-line'</span>,</span><br><span class="line">    <span class="string">'consistent'</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// switch 语句必须有 default</span></span><br><span class="line"><span class="comment">// @off 太严格了</span></span><br><span class="line"><span class="string">'default-case'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 链式调用的时候，点号必须放在第二行开头处，禁止放在第一行结尾处</span></span><br><span class="line"><span class="string">'dot-location'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'property'</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable 禁止出现 foo['bar']，必须写成 foo.bar</span></span><br><span class="line"><span class="comment">// @off 当需要写一系列属性的时候，可以更统一</span></span><br><span class="line"><span class="string">'dot-notation'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 必须使用 === 或 !==，禁止使用 == 或 !=，与 null 比较时除外</span></span><br><span class="line"><span class="string">'eqeqeq'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'always'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="literal">null</span>: <span class="string">'ignore'</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// for in 内部必须有 hasOwnProperty</span></span><br><span class="line"><span class="string">'guard-for-in'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止使用 alert</span></span><br><span class="line"><span class="comment">// @off alert 很常用</span></span><br><span class="line"><span class="string">'no-alert'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止使用 caller 或 callee</span></span><br><span class="line"><span class="string">'no-caller'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// switch 的 case 内有变量定义的时候，必须使用大括号将 case 内变成一个代码块</span></span><br><span class="line"><span class="string">'no-case-declarations'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止在正则表达式中出现形似除法操作符的开头，如 let a = /=foo/</span></span><br><span class="line"><span class="comment">// @off 有代码高亮的话，在阅读这种代码时，也完全不会产生歧义或理解上的困难</span></span><br><span class="line"><span class="string">'no-div-regex'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 禁止在 else 内使用 return，必须改为提前结束</span></span><br><span class="line"><span class="comment">// @off else 中使用 return 可以使代码结构更清晰</span></span><br><span class="line"><span class="string">'no-else-return'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 不允许有空函数，除非是将一个空函数设置为某个项的默认值</span></span><br><span class="line"><span class="string">'no-empty-function'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        allow: [</span><br><span class="line">            <span class="string">'functions'</span>,</span><br><span class="line">            <span class="string">'arrowFunctions'</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// 禁止解构中出现空 &#123;&#125; 或 []</span></span><br><span class="line"><span class="string">'no-empty-pattern'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止使用 foo == null 或 foo != null，必须使用 foo === null 或 foo !== null</span></span><br><span class="line"><span class="comment">// @off foo == null 用于判断 foo 不是 undefined 并且不是 null，比较常用，故允许此写法</span></span><br><span class="line"><span class="string">'no-eq-null'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止使用 eval</span></span><br><span class="line"><span class="string">'no-eval'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止修改原生对象</span></span><br><span class="line"><span class="string">'no-extend-native'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// @fixable 禁止出现没必要的 bind</span></span><br><span class="line"><span class="string">'no-extra-bind'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// @fixable 禁止出现没必要的 label</span></span><br><span class="line"><span class="string">'no-extra-label'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// switch 的 case 内必须有 break, return 或 throw</span></span><br><span class="line"><span class="string">'no-fallthrough'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// @fixable 表示小数时，禁止省略 0，比如 .5</span></span><br><span class="line"><span class="string">'no-floating-decimal'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止对全局变量赋值</span></span><br><span class="line"><span class="string">'no-global-assign'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// @fixable 禁止使用 !! ~ 等难以理解的运算符</span></span><br><span class="line"><span class="comment">// 仅允许使用 !!</span></span><br><span class="line"><span class="string">'no-implicit-coercion'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        allow: [</span><br><span class="line">            <span class="string">'!!'</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// 禁止在全局作用域下定义变量或申明函数</span></span><br><span class="line"><span class="string">'no-implicit-globals'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止在 setTimeout 或 setInterval 中传入字符串，如 setTimeout('alert("Hi!")', 100);</span></span><br><span class="line"><span class="string">'no-implied-eval'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止在类之外的地方使用 this</span></span><br><span class="line"><span class="comment">// @off this 的使用很灵活，事件回调中可以表示当前元素，函数也可以先用 this，等以后被调用的时候再 call</span></span><br><span class="line"><span class="string">'no-invalid-this'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止使用 __iterator__</span></span><br><span class="line"><span class="string">'no-iterator'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止使用 label</span></span><br><span class="line"><span class="string">'no-labels'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止使用没必要的 &#123;&#125; 作为代码块</span></span><br><span class="line"><span class="string">'no-lone-blocks'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止在循环内的函数中出现循环体条件语句中定义的变量，比如：</span></span><br><span class="line"><span class="comment">// for (var i = 0; i &lt; 10; i++) &#123;</span></span><br><span class="line"><span class="comment">//     (function () &#123; return i &#125;)();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="string">'no-loop-func'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止使用 magic numbers</span></span><br><span class="line"><span class="comment">// @off 太严格了</span></span><br><span class="line"><span class="string">'no-magic-numbers'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 禁止出现连续的多个空格，除非是注释前，或对齐对象的属性、变量定义、import 等</span></span><br><span class="line"><span class="string">'no-multi-spaces'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        ignoreEOLComments: <span class="literal">true</span>,</span><br><span class="line">        exceptions: &#123;</span><br><span class="line">            Property: <span class="literal">true</span>,</span><br><span class="line">            BinaryExpression: <span class="literal">false</span>,</span><br><span class="line">            VariableDeclarator: <span class="literal">true</span>,</span><br><span class="line">            ImportDeclaration: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// 禁止使用 \ 来换行字符串</span></span><br><span class="line"><span class="string">'no-multi-str'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止直接 new 一个类而不赋值</span></span><br><span class="line"><span class="string">'no-new'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止使用 new Function，比如 let x = new Function("a", "b", "return a + b");</span></span><br><span class="line"><span class="string">'no-new-func'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止使用 new 来生成 String, Number 或 Boolean</span></span><br><span class="line"><span class="string">'no-new-wrappers'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止使用 0 开头的数字表示八进制数</span></span><br><span class="line"><span class="string">'no-octal'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止使用八进制的转义符</span></span><br><span class="line"><span class="string">'no-octal-escape'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止对函数的参数重新赋值</span></span><br><span class="line"><span class="string">'no-param-reassign'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止使用 __proto__</span></span><br><span class="line"><span class="string">'no-proto'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止重复定义变量</span></span><br><span class="line"><span class="string">'no-redeclare'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止使用指定的对象属性</span></span><br><span class="line"><span class="comment">// @off 它用于限制某个具体的 api 不能使用</span></span><br><span class="line"><span class="string">'no-restricted-properties'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止在 return 语句里赋值</span></span><br><span class="line"><span class="string">'no-return-assign'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'always'</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// 禁止在 return 语句里使用 await</span></span><br><span class="line"><span class="string">'no-return-await'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止出现 location.href = 'javascript:void(0)';</span></span><br><span class="line"><span class="string">'no-script-url'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止将自己赋值给自己</span></span><br><span class="line"><span class="string">'no-self-assign'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止将自己与自己比较</span></span><br><span class="line"><span class="string">'no-self-compare'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止使用逗号操作符</span></span><br><span class="line"><span class="string">'no-sequences'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止 throw 字面量，必须 throw 一个 Error 对象</span></span><br><span class="line"><span class="string">'no-throw-literal'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 循环内必须对循环条件的变量有修改</span></span><br><span class="line"><span class="string">'no-unmodified-loop-condition'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止无用的表达式</span></span><br><span class="line"><span class="string">'no-unused-expressions'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        allowShortCircuit: <span class="literal">true</span>,</span><br><span class="line">        allowTernary: <span class="literal">true</span>,</span><br><span class="line">        allowTaggedTemplates: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable 禁止出现没用的 label</span></span><br><span class="line"><span class="string">'no-unused-labels'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止出现没必要的 call 或 apply</span></span><br><span class="line"><span class="string">'no-useless-call'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止出现没必要的字符串连接</span></span><br><span class="line"><span class="string">'no-useless-concat'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止出现没必要的转义</span></span><br><span class="line"><span class="comment">// @off 转义可以使代码更易懂</span></span><br><span class="line"><span class="string">'no-useless-escape'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 禁止没必要的 return</span></span><br><span class="line"><span class="comment">// @off 没必要限制 return</span></span><br><span class="line"><span class="string">'no-useless-return'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止使用 void</span></span><br><span class="line"><span class="string">'no-void'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止注释中出现 TODO 和 FIXME</span></span><br><span class="line"><span class="comment">// @off TODO 很常用</span></span><br><span class="line"><span class="string">'no-warning-comments'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止使用 with</span></span><br><span class="line"><span class="string">'no-with'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// Promise 的 reject 中必须传入 Error 对象，而不是字面量</span></span><br><span class="line"><span class="string">'prefer-promise-reject-errors'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// parseInt 必须传入第二个参数</span></span><br><span class="line"><span class="string">'radix'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// async 函数中必须存在 await 语句</span></span><br><span class="line"><span class="comment">// @off async function 中没有 await 的写法很常见，比如 koa 的示例中就有这种用法</span></span><br><span class="line"><span class="string">'require-await'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// var 必须在作用域的最前面</span></span><br><span class="line"><span class="comment">// @off var 不在最前面也是很常见的用法</span></span><br><span class="line"><span class="string">'vars-on-top'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 立即执行的函数必须符合如下格式 (function () &#123; alert('Hello') &#125;)()</span></span><br><span class="line"><span class="string">'wrap-iife'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'inside'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        functionPrototypeMethods: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable 必须使用 if (foo === 5) 而不是 if (5 === foo)</span></span><br><span class="line"><span class="string">'yoda'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'never'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        onlyEquality: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 严格模式</span></span><br><span class="line"><span class="comment">// 这些规则与严格模式指令有关</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @fixable 禁止使用 'strict';</span></span><br><span class="line"><span class="string">'strict'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'never'</span></span><br><span class="line">],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 变量</span></span><br><span class="line"><span class="comment">// 这些规则与变量申明有关</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 变量必须在定义的时候赋值</span></span><br><span class="line"><span class="comment">// @off 先定义后赋值很常见</span></span><br><span class="line"><span class="string">'init-declarations'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止 catch 的参数名与定义过的变量重复</span></span><br><span class="line"><span class="comment">// @off 太严格了</span></span><br><span class="line"><span class="string">'no-catch-shadow'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止使用 delete</span></span><br><span class="line"><span class="string">'no-delete-var'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止 label 名称与定义过的变量重复</span></span><br><span class="line"><span class="string">'no-label-var'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止使用指定的全局变量</span></span><br><span class="line"><span class="comment">// @off 它用于限制某个具体的变量名不能使用</span></span><br><span class="line"><span class="string">'no-restricted-globals'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止变量名与上层作用域内的定义过的变量重复</span></span><br><span class="line"><span class="comment">// @off 很多时候函数的形参和传参是同名的</span></span><br><span class="line"><span class="string">'no-shadow'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止使用保留字作为变量名</span></span><br><span class="line"><span class="string">'no-shadow-restricted-names'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止使用未定义的变量</span></span><br><span class="line"><span class="string">'no-undef'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">typeof</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable 禁止将 undefined 赋值给变量</span></span><br><span class="line"><span class="string">'no-undef-init'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止对 undefined 重新赋值</span></span><br><span class="line"><span class="string">'no-undefined'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 定义过的变量必须使用</span></span><br><span class="line"><span class="string">'no-unused-vars'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        vars: <span class="string">'all'</span>,</span><br><span class="line">        args: <span class="string">'none'</span>,</span><br><span class="line">        caughtErrors: <span class="string">'none'</span>,</span><br><span class="line">        ignoreRestSiblings: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// 变量必须先定义后使用</span></span><br><span class="line"><span class="string">'no-use-before-define'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        functions: <span class="literal">false</span>,</span><br><span class="line">        classes: <span class="literal">false</span>,</span><br><span class="line">        variables: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Node.js 和 CommonJS</span></span><br><span class="line"><span class="comment">// 这些规则与在 Node.js 中运行的代码或浏览器中使用的 CommonJS 有关</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// callback 之后必须立即 return</span></span><br><span class="line"><span class="comment">// @off Limitations 太多了</span></span><br><span class="line"><span class="string">'callback-return'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// require 必须在全局作用域下</span></span><br><span class="line"><span class="comment">// @off 条件加载很常见</span></span><br><span class="line"><span class="string">'global-require'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// callback 中的 error 必须被处理</span></span><br><span class="line"><span class="string">'handle-callback-err'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止直接使用 Buffer</span></span><br><span class="line"><span class="string">'no-buffer-constructor'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 相同类型的 require 必须放在一起</span></span><br><span class="line"><span class="comment">// @off 太严格了</span></span><br><span class="line"><span class="string">'no-mixed-requires'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止直接 new require('foo')</span></span><br><span class="line"><span class="string">'no-new-require'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止对 __dirname 或 __filename 使用字符串连接</span></span><br><span class="line"><span class="string">'no-path-concat'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止使用 process.env.NODE_ENV</span></span><br><span class="line"><span class="comment">// @off 使用很常见</span></span><br><span class="line"><span class="string">'no-process-env'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止使用 process.exit(0)</span></span><br><span class="line"><span class="comment">// @off 使用很常见</span></span><br><span class="line"><span class="string">'no-process-exit'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止使用指定的模块</span></span><br><span class="line"><span class="comment">// @off 它用于限制某个具体的模块不能使用</span></span><br><span class="line"><span class="string">'no-restricted-modules'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止使用 node 中的同步的方法，比如 fs.readFileSync</span></span><br><span class="line"><span class="comment">// @off 使用很常见</span></span><br><span class="line"><span class="string">'no-sync'</span>: <span class="string">'off'</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 风格问题</span></span><br><span class="line"><span class="comment">// 这些规则与代码风格有关，所以是非常主观的</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @fixable 配置数组的中括号内前后的换行格式</span></span><br><span class="line"><span class="comment">// @off 配置项无法配制成想要的样子</span></span><br><span class="line"><span class="string">'array-bracket-newline'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 数组的括号内的前后禁止有空格</span></span><br><span class="line"><span class="string">'array-bracket-spacing'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'never'</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable 配置数组的元素之间的换行格式</span></span><br><span class="line"><span class="comment">// @off 允许一行包含多个元素，方便大数量的数组的书写</span></span><br><span class="line"><span class="string">'array-element-newline'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 代码块如果在一行内，那么大括号内的首尾必须有空格，比如 function () &#123; alert('Hello') &#125;</span></span><br><span class="line"><span class="string">'block-spacing'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'always'</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable if 与 else 的大括号风格必须一致</span></span><br><span class="line"><span class="comment">// @off else 代码块可能前面需要有一行注释</span></span><br><span class="line"><span class="string">'brace-style'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 变量名必须是 camelcase 风格的</span></span><br><span class="line"><span class="comment">// @off 很多 api 或文件名都不是 camelcase</span></span><br><span class="line"><span class="string">'camelcase'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 注释的首字母必须大写</span></span><br><span class="line"><span class="comment">// @off 没必要限制</span></span><br><span class="line"><span class="string">'capitalized-comments'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 对象的最后一个属性末尾必须有逗号</span></span><br><span class="line"><span class="comment">// @off 没必要限制</span></span><br><span class="line"><span class="string">'comma-dangle'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 逗号前禁止有空格，逗号后必须要有空格</span></span><br><span class="line"><span class="string">'comma-spacing'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'before'</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">'after'</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable 禁止在行首写逗号</span></span><br><span class="line"><span class="string">'comma-style'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'last'</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable 用作对象的计算属性时，中括号内的首尾禁止有空格</span></span><br><span class="line"><span class="string">'computed-property-spacing'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'never'</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// 限制 this 的别名</span></span><br><span class="line"><span class="comment">// @off 没必要限制</span></span><br><span class="line"><span class="string">'consistent-this'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 文件最后一行必须有一个空行</span></span><br><span class="line"><span class="comment">// @off 没必要限制</span></span><br><span class="line"><span class="string">'eol-last'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 函数名和执行它的括号之间禁止有空格</span></span><br><span class="line"><span class="string">'func-call-spacing'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'never'</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// 函数赋值给变量的时候，函数名必须与变量名一致</span></span><br><span class="line"><span class="string">'func-name-matching'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'always'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        includeCommonJSModuleExports: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// 函数必须有名字</span></span><br><span class="line"><span class="comment">// @off 没必要限制</span></span><br><span class="line"><span class="string">'func-names'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 必须只使用函数声明或只使用函数表达式</span></span><br><span class="line"><span class="comment">// @off 没必要限制</span></span><br><span class="line"><span class="string">'func-style'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止使用指定的标识符</span></span><br><span class="line"><span class="comment">// @off 它用于限制某个具体的标识符不能使用</span></span><br><span class="line"><span class="string">'id-blacklist'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 限制变量名长度</span></span><br><span class="line"><span class="comment">// @off 没必要限制变量名长度</span></span><br><span class="line"><span class="string">'id-length'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 限制变量名必须匹配指定的正则表达式</span></span><br><span class="line"><span class="comment">// @off 没必要限制变量名</span></span><br><span class="line"><span class="string">'id-match'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 一个缩进必须用四个空格替代</span></span><br><span class="line"><span class="string">'indent'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="number">4</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        SwitchCase: <span class="number">1</span>,</span><br><span class="line">        flatTernaryExpressions: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable jsx 中的属性必须用双引号</span></span><br><span class="line"><span class="string">'jsx-quotes'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'prefer-double'</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable 对象字面量中冒号前面禁止有空格，后面必须有空格</span></span><br><span class="line"><span class="string">'key-spacing'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        beforeColon: <span class="literal">false</span>,</span><br><span class="line">        afterColon: <span class="literal">true</span>,</span><br><span class="line">        mode: <span class="string">'strict'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable 关键字前后必须有空格</span></span><br><span class="line"><span class="string">'keyword-spacing'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        before: <span class="literal">true</span>,</span><br><span class="line">        after: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// 单行注释必须写在上一行</span></span><br><span class="line"><span class="comment">// @off 没必要限制</span></span><br><span class="line"><span class="string">'line-comment-position'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 限制换行符为 LF 或 CRLF</span></span><br><span class="line"><span class="comment">// @off 没必要限制</span></span><br><span class="line"><span class="string">'linebreak-style'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 注释前后必须有空行</span></span><br><span class="line"><span class="comment">// @off 没必要限制</span></span><br><span class="line"><span class="string">'lines-around-comment'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 代码块嵌套的深度禁止超过 5 层</span></span><br><span class="line"><span class="string">'max-depth'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="number">5</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// 限制一行的长度</span></span><br><span class="line"><span class="comment">// @off 现在编辑器已经很智能了，不需要限制一行的长度</span></span><br><span class="line"><span class="string">'max-len'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 限制一个文件最多的行数</span></span><br><span class="line"><span class="comment">// @off 没必要限制</span></span><br><span class="line"><span class="string">'max-lines'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 回调函数嵌套禁止超过 3 层，多了请用 async await 替代</span></span><br><span class="line"><span class="string">'max-nested-callbacks'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="number">3</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// 函数的参数禁止超过 7 个</span></span><br><span class="line"><span class="string">'max-params'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="number">7</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// 限制函数块中的语句数量</span></span><br><span class="line"><span class="comment">// @off 没必要限制</span></span><br><span class="line"><span class="string">'max-statements'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 限制一行中的语句数量</span></span><br><span class="line"><span class="comment">// @off 没必要限制</span></span><br><span class="line"><span class="string">'max-statements-per-line'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 三元表达式必须得换行</span></span><br><span class="line"><span class="comment">// @off 三元表达式可以随意使用</span></span><br><span class="line"><span class="string">'multiline-ternary'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// new 后面的类名必须首字母大写</span></span><br><span class="line"><span class="string">'new-cap'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        newIsCap: <span class="literal">true</span>,</span><br><span class="line">        capIsNew: <span class="literal">false</span>,</span><br><span class="line">        properties: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable new 后面的类必须有小括号</span></span><br><span class="line"><span class="string">'new-parens'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 链式调用必须换行</span></span><br><span class="line"><span class="comment">// @off 没必要限制</span></span><br><span class="line"><span class="string">'newline-per-chained-call'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止使用 Array 构造函数</span></span><br><span class="line"><span class="string">'no-array-constructor'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止使用位运算</span></span><br><span class="line"><span class="comment">// @off 位运算很常见</span></span><br><span class="line"><span class="string">'no-bitwise'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止使用 continue</span></span><br><span class="line"><span class="comment">// @off continue 很常用</span></span><br><span class="line"><span class="string">'no-continue'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止在代码后添加内联注释</span></span><br><span class="line"><span class="comment">// @off 内联注释很常用</span></span><br><span class="line"><span class="string">'no-inline-comments'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 禁止 else 中只有一个单独的 if</span></span><br><span class="line"><span class="comment">// @off 单独的 if 可以把逻辑表达的更清楚</span></span><br><span class="line"><span class="string">'no-lonely-if'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止混用不同的操作符，比如 let foo = a &amp;&amp; b &lt; 0 || c &gt; 0 || d + 1 === 0</span></span><br><span class="line"><span class="comment">// @off 太严格了，可以由使用者自己去判断如何混用操作符</span></span><br><span class="line"><span class="string">'no-mixed-operators'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止混用空格和缩进</span></span><br><span class="line"><span class="string">'no-mixed-spaces-and-tabs'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止连续赋值，比如 a = b = c = 5</span></span><br><span class="line"><span class="comment">// @off 没必要限制</span></span><br><span class="line"><span class="string">'no-multi-assign'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 禁止出现超过三行的连续空行</span></span><br><span class="line"><span class="string">'no-multiple-empty-lines'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        max: <span class="number">3</span>,</span><br><span class="line">        maxEOF: <span class="number">1</span>,</span><br><span class="line">        maxBOF: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// 禁止 if 里面有否定的表达式，比如：</span></span><br><span class="line"><span class="comment">// if (a !== b) &#123;</span></span><br><span class="line"><span class="comment">//     doSomething();</span></span><br><span class="line"><span class="comment">// &#125; else &#123;</span></span><br><span class="line"><span class="comment">//     doSomethingElse();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// @off 否定的表达式可以把逻辑表达的更清楚</span></span><br><span class="line"><span class="string">'no-negated-condition'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止使用嵌套的三元表达式，比如 a ? b : c ? d : e</span></span><br><span class="line"><span class="comment">// @off 没必要限制</span></span><br><span class="line"><span class="string">'no-nested-ternary'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止直接 new Object</span></span><br><span class="line"><span class="string">'no-new-object'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止使用 ++ 或 --</span></span><br><span class="line"><span class="comment">// @off 没必要限制</span></span><br><span class="line"><span class="string">'no-plusplus'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止使用特定的语法</span></span><br><span class="line"><span class="comment">// @off 它用于限制某个具体的语法不能使用</span></span><br><span class="line"><span class="string">'no-restricted-syntax'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止使用 tabs</span></span><br><span class="line"><span class="string">'no-tabs'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止使用三元表达式</span></span><br><span class="line"><span class="comment">// @off 三元表达式很常用</span></span><br><span class="line"><span class="string">'no-ternary'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 禁止行尾有空格</span></span><br><span class="line"><span class="string">'no-trailing-spaces'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止变量名出现下划线</span></span><br><span class="line"><span class="comment">// @off 下划线在变量名中很常用</span></span><br><span class="line"><span class="string">'no-underscore-dangle'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 必须使用 !a 替代 a ? false : true</span></span><br><span class="line"><span class="comment">// @off 后者表达的更清晰</span></span><br><span class="line"><span class="string">'no-unneeded-ternary'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 禁止属性前有空格，比如 foo. bar()</span></span><br><span class="line"><span class="string">'no-whitespace-before-property'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// @fixable 禁止 if 后面不加大括号而写两行代码</span></span><br><span class="line"><span class="string">'nonblock-statement-body-position'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'beside'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        overrides: &#123;</span><br><span class="line">            <span class="keyword">while</span>: <span class="string">'below'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable 大括号内的首尾必须有换行</span></span><br><span class="line"><span class="string">'object-curly-newline'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        multiline: <span class="literal">true</span>,</span><br><span class="line">        consistent: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable 对象字面量只有一行时，大括号内的首尾必须有空格</span></span><br><span class="line"><span class="string">'object-curly-spacing'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'always'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        arraysInObjects: <span class="literal">true</span>,</span><br><span class="line">        objectsInObjects: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable 对象字面量内的属性每行必须只有一个</span></span><br><span class="line"><span class="comment">// @off 没必要限制</span></span><br><span class="line"><span class="string">'object-property-newline'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止变量申明时用逗号一次申明多个</span></span><br><span class="line"><span class="string">'one-var'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'never'</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable 变量申明必须每行一个</span></span><br><span class="line"><span class="string">'one-var-declaration-per-line'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'always'</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable 必须使用 x = x + y 而不是 x += y</span></span><br><span class="line"><span class="comment">// @off 没必要限制</span></span><br><span class="line"><span class="string">'operator-assignment'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 需要换行的时候，操作符必须放在行末，比如：</span></span><br><span class="line"><span class="comment">// let foo = 1 +</span></span><br><span class="line"><span class="comment">//     2</span></span><br><span class="line"><span class="comment">// @off 有时放在第二行开始处更易读</span></span><br><span class="line"><span class="string">'operator-linebreak'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 代码块首尾必须要空行</span></span><br><span class="line"><span class="comment">// @off 没必要限制</span></span><br><span class="line"><span class="string">'padded-blocks'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 限制语句之间的空行规则，比如变量定义完之后必须要空行</span></span><br><span class="line"><span class="comment">// @off 没必要限制</span></span><br><span class="line"><span class="string">'padding-line-between-statements'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 对象字面量的键名禁止用引号括起来</span></span><br><span class="line"><span class="comment">// @off 没必要限制</span></span><br><span class="line"><span class="string">'quote-props'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 必须使用单引号，禁止使用双引号</span></span><br><span class="line"><span class="string">'quotes'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'single'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        avoidEscape: <span class="literal">true</span>,</span><br><span class="line">        allowTemplateLiterals: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// 必须使用 jsdoc 风格的注释</span></span><br><span class="line"><span class="comment">// @off 太严格了</span></span><br><span class="line"><span class="string">'require-jsdoc'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 结尾必须有分号</span></span><br><span class="line"><span class="string">'semi'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'always'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        omitLastInOneLineBlock: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable 一行有多个语句时，分号前面禁止有空格，分号后面必须有空格</span></span><br><span class="line"><span class="string">'semi-spacing'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        before: <span class="literal">false</span>,</span><br><span class="line">        after: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable 分号必须写在行尾，禁止在行首出现</span></span><br><span class="line"><span class="string">'semi-style'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'last'</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// 对象字面量的键名必须排好序</span></span><br><span class="line"><span class="comment">// @off 没必要限制</span></span><br><span class="line"><span class="string">'sort-keys'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 变量申明必须排好序</span></span><br><span class="line"><span class="comment">// @off 没必要限制</span></span><br><span class="line"><span class="string">'sort-vars'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable if, function 等的大括号之前必须要有空格，比如 if (a) &#123;</span></span><br><span class="line"><span class="string">'space-before-blocks'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'always'</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable function 的小括号之前必须要有空格</span></span><br><span class="line"><span class="string">'space-before-function-paren'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        anonymous: <span class="string">'ignore'</span>,</span><br><span class="line">        named: <span class="string">'never'</span>,</span><br><span class="line">        asyncArrow: <span class="string">'always'</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable 小括号内的首尾禁止有空格</span></span><br><span class="line"><span class="string">'space-in-parens'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'never'</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable 操作符左右必须有空格，比如 let sum = 1 + 2;</span></span><br><span class="line"><span class="string">'space-infix-ops'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// @fixable new, typeof 等后面必须有空格，++, -- 等禁止有空格，比如：</span></span><br><span class="line"><span class="comment">// let foo = new Person();</span></span><br><span class="line"><span class="comment">// bar = bar++;</span></span><br><span class="line"><span class="string">'space-unary-ops'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        words: <span class="literal">true</span>,</span><br><span class="line">        nonwords: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable 注释的斜线或 * 后必须有空格</span></span><br><span class="line"><span class="string">'spaced-comment'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'always'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        block: &#123;</span><br><span class="line">            exceptions: [</span><br><span class="line">                <span class="string">'*'</span></span><br><span class="line">            ],</span><br><span class="line">            balanced: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable case 的冒号前禁止有空格，冒号后必须有空格</span></span><br><span class="line"><span class="string">'switch-colon-spacing'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        after: <span class="literal">true</span>,</span><br><span class="line">        before: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable 模版字符串的 tag 之后禁止有空格，比如 tag`Hello World`</span></span><br><span class="line"><span class="string">'template-tag-spacing'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'never'</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable 文件开头禁止有 BOM</span></span><br><span class="line"><span class="string">'unicode-bom'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'never'</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable 正则表达式必须有括号包起来</span></span><br><span class="line"><span class="comment">// @off 没必要限制</span></span><br><span class="line"><span class="string">'wrap-regex'</span>: <span class="string">'off'</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// ECMAScript 6</span></span><br><span class="line"><span class="comment">// 这些规则与 ES6（即通常所说的 ES2015）有关</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @fixable 箭头函数能够省略 return 的时候，必须省略，比如必须写成 () =&gt; 0，禁止写成 () =&gt; &#123; return 0 &#125;</span></span><br><span class="line"><span class="comment">// @off 箭头函数的返回值，应该允许灵活设置</span></span><br><span class="line"><span class="string">'arrow-body-style'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 箭头函数只有一个参数的时候，必须加括号</span></span><br><span class="line"><span class="comment">// @off 应该允许灵活设置</span></span><br><span class="line"><span class="string">'arrow-parens'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 箭头函数的箭头前后必须有空格</span></span><br><span class="line"><span class="string">'arrow-spacing'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        before: <span class="literal">true</span>,</span><br><span class="line">        after: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// constructor 中必须有 super</span></span><br><span class="line"><span class="string">'constructor-super'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// @fixable generator 的 * 前面禁止有空格，后面必须有空格</span></span><br><span class="line"><span class="string">'generator-star-spacing'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        before: <span class="literal">false</span>,</span><br><span class="line">        after: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// 禁止对定义过的 class 重新赋值</span></span><br><span class="line"><span class="string">'no-class-assign'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// @fixable 禁止出现难以理解的箭头函数，比如 let x = a =&gt; 1 ? 2 : 3</span></span><br><span class="line"><span class="string">'no-confusing-arrow'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        allowParens: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// 禁止对使用 const 定义的常量重新赋值</span></span><br><span class="line"><span class="string">'no-const-assign'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止重复定义类</span></span><br><span class="line"><span class="string">'no-dupe-class-members'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止重复 import 模块</span></span><br><span class="line"><span class="string">'no-duplicate-imports'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止使用 new 来生成 Symbol</span></span><br><span class="line"><span class="string">'no-new-symbol'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止 import 指定的模块</span></span><br><span class="line"><span class="comment">// @off 它用于限制某个具体的模块不能使用</span></span><br><span class="line"><span class="string">'no-restricted-imports'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 禁止在 super 被调用之前使用 this 或 super</span></span><br><span class="line"><span class="string">'no-this-before-super'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// @fixable 禁止出现没必要的计算键名，比如 let a = &#123; ['0']: 0 &#125;;</span></span><br><span class="line"><span class="string">'no-useless-computed-key'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// 禁止出现没必要的 constructor，比如 constructor(value) &#123; super(value) &#125;</span></span><br><span class="line"><span class="string">'no-useless-constructor'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// @fixable 禁止解构时出现同样名字的的重命名，比如 let &#123; foo: foo &#125; = bar;</span></span><br><span class="line"><span class="string">'no-useless-rename'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// @fixable 禁止使用 var</span></span><br><span class="line"><span class="string">'no-var'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// @fixable 必须使用 a = &#123;b&#125; 而不是 a = &#123;b: b&#125;</span></span><br><span class="line"><span class="comment">// @off 没必要强制要求</span></span><br><span class="line"><span class="string">'object-shorthand'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 必须使用箭头函数作为回调</span></span><br><span class="line"><span class="comment">// @off 没必要强制要求</span></span><br><span class="line"><span class="string">'prefer-arrow-callback'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 申明后不再被修改的变量必须使用 const 来申明</span></span><br><span class="line"><span class="comment">// @off 没必要强制要求</span></span><br><span class="line"><span class="string">'prefer-const'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 必须使用解构</span></span><br><span class="line"><span class="comment">// @off 没必要强制要求</span></span><br><span class="line"><span class="string">'prefer-destructuring'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 必须使用 0b11111011 而不是 parseInt('111110111', 2)</span></span><br><span class="line"><span class="comment">// @off 没必要强制要求</span></span><br><span class="line"><span class="string">'prefer-numeric-literals'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 必须使用 ...args 而不是 arguments</span></span><br><span class="line"><span class="comment">// @off 没必要强制要求</span></span><br><span class="line"><span class="string">'prefer-rest-params'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 必须使用 ... 而不是 apply，比如 foo(...args)</span></span><br><span class="line"><span class="comment">// @off  apply 很常用</span></span><br><span class="line"><span class="string">'prefer-spread'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// @fixable 必须使用模版字符串而不是字符串连接</span></span><br><span class="line"><span class="comment">// @off 字符串连接很常用</span></span><br><span class="line"><span class="string">'prefer-template'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// generator 函数内必须有 yield</span></span><br><span class="line"><span class="string">'require-yield'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// @fixable ... 的后面禁止有空格</span></span><br><span class="line"><span class="string">'rest-spread-spacing'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'never'</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable import 必须按规则排序</span></span><br><span class="line"><span class="comment">// @off 没必要强制要求</span></span><br><span class="line"><span class="string">'sort-imports'</span>: <span class="string">'off'</span>,</span><br><span class="line"><span class="comment">// 创建 Symbol 时必须传入参数</span></span><br><span class="line"><span class="string">'symbol-description'</span>: <span class="string">'error'</span>,</span><br><span class="line"><span class="comment">// @fixable $&#123;name&#125; 内的首尾禁止有空格</span></span><br><span class="line"><span class="string">'template-curly-spacing'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'never'</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// @fixable yield* 后面必须要有空格</span></span><br><span class="line"><span class="string">'yield-star-spacing'</span>: [</span><br><span class="line">    <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'after'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>eslint+prettier</category>
      </categories>
  </entry>
  <entry>
    <title>ElementUI给循环表单项添加prop校验</title>
    <url>/2020/05/19/ElementUI%E7%BB%99%E5%BE%AA%E7%8E%AF%E8%A1%A8%E5%8D%95%E9%A1%B9%E6%B7%BB%E5%8A%A0prop%E6%A0%A1%E9%AA%8C/</url>
    <content><![CDATA[<p>场景：饿了么表单项是循环生成的，但是需要给这些表单项都加上校验（校验规则相同），下面是一个循环生成1~12月份的输入框表单项的表单示例，代码如下：</p>
<a id="more"></a>

<p>template</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-col</span> <span class="attr">v-for</span>=<span class="string">"(item, key) in fieldArr"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">:label</span>=<span class="string">"key + 1 + '月'"</span> <span class="attr">:prop</span>=<span class="string">"'fieldArr.' + key"</span> <span class="attr">:rules</span>=<span class="string">"rules.field"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"fieldArr[key]"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>rules</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        fieldArr: <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">12</span>),</span><br><span class="line">        rules: &#123;</span><br><span class="line">            field: [</span><br><span class="line">                &#123;</span><br><span class="line">                    required: <span class="literal">true</span>,</span><br><span class="line">                    message: <span class="string">'请输入当月数据'</span>,</span><br><span class="line">                    trigger: <span class="string">'blur'</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li><p>prop要和v-model绑定的数据一致（写法会不一样，看代码示例），上面的fieldArr是一个初始化为12个长度的一维数组</p>
</li>
<li><p>因为prop要绑定这个一维数组的第0、1、2、3…11号位上的元素，fieldArr是固定的，变化的只是fieldArr后面的数值（<code>field[1]、field[2]</code> 等），所以fieldArr是一个字符串，并且要加一个”<code>.</code>“，拼接一个循环的索引值（情景中的key），注意这里不能直接用<code>:prop=&quot;field[key]&quot;</code></p>
</li>
<li><p>要给循环的表单项单独绑定rules，绑定格式为：<code>rules.xxx</code>（xxx是校验项。如果是静态生成的表单项只需要在form标签中绑定rules，在表单项中绑定prop即可）</p>
</li>
</ol>
]]></content>
      <categories>
        <category>ElementUI</category>
      </categories>
  </entry>
  <entry>
    <title>JS获取当前日期时间以及格式化</title>
    <url>/2020/09/27/JS%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E4%BB%A5%E5%8F%8A%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCurrentDate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> val = <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">        timer = <span class="string">''</span>,</span><br><span class="line">        year = val.getFullYear(),</span><br><span class="line">        month = val.getMonth() + <span class="number">1</span>,</span><br><span class="line">        day = val.getDate(),</span><br><span class="line">        hour = val.getHours() &lt; <span class="number">10</span> ? <span class="string">'0'</span> + val.getHours() : val.getHours(),</span><br><span class="line">        minute = val.getMinutes() &lt; <span class="number">10</span> ? <span class="string">'0'</span> + val.getMinutes() : val.getMinutes(),</span><br><span class="line">        second = val.getSeconds() &lt; <span class="number">10</span> ? <span class="string">'0'</span> + val.getSeconds() : val.getSeconds();</span><br><span class="line">    month &gt;= <span class="number">1</span> &amp;&amp; month &lt;= <span class="number">9</span> ? (month = <span class="string">'0'</span> + month) : <span class="string">''</span>;</span><br><span class="line">    day &gt;= <span class="number">0</span> &amp;&amp; day &lt;= <span class="number">9</span> ? (day = <span class="string">'0'</span> + day) : <span class="string">''</span>;</span><br><span class="line">    timer = year + <span class="string">'-'</span> + month + <span class="string">'-'</span> + day + <span class="string">' '</span> + hour + <span class="string">':'</span> + minute + <span class="string">':'</span> + second;</span><br><span class="line">    <span class="keyword">return</span> timer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
  </entry>
  <entry>
    <title>elementUI下拉选择框选项是对象时的存取值逻辑</title>
    <url>/2020/06/08/elementUI%E4%B8%8B%E6%8B%89%E9%80%89%E6%8B%A9%E6%A1%86%E9%80%89%E9%A1%B9%E6%98%AF%E5%AF%B9%E8%B1%A1%E6%97%B6%E7%9A%84%E5%AD%98%E5%8F%96%E5%80%BC%E9%80%BB%E8%BE%91/</url>
    <content><![CDATA[<p>场景：如果下拉框的选项数据是一个对象数组的话，并且后台需要保存对象中的好几个字段，该如何存取值</p>
<a id="more"></a>

<p>举例：假设选项数据是类似于下面这种对象数组的JSON格式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">objArr = [</span><br><span class="line">    &#123;</span><br><span class="line">        id: <span class="string">'1'</span>,</span><br><span class="line">        name: <span class="string">'语文'</span>,</span><br><span class="line">        grade: <span class="string">'三年级'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id: <span class="string">'2'</span>,</span><br><span class="line">        name: <span class="string">'数学'</span>,</span><br><span class="line">        grade: <span class="string">'三年级'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>这里如果下拉选项只需展示name值，但保存的时候需要同时把id和name传给后台，该怎么做</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;el-form-item prop&#x3D;&quot;subject&quot; label&#x3D;&quot;科目&quot;&gt;</span><br><span class="line">        &#x2F;&#x2F; 注意 value-key 与 下面的 key 绑定的是同一个字段， 区别是一个不需要冒号，一个需要冒号</span><br><span class="line">        &lt;el-select v-model&#x3D;&quot;form.chooseObj&quot; value-key&#x3D;&quot;id&quot; placeholder&#x3D;&quot;请选择&quot; class&#x3D;&quot;border-bottom&quot;&gt;</span><br><span class="line">            &lt;el-option :label&#x3D;&quot;item.name&quot; </span><br><span class="line">                       :value&#x3D;&quot;&#123;name: item.name, id: item.id&#125;&quot;</span><br><span class="line">                       v-for&#x3D;&quot;item in objArr&quot;</span><br><span class="line">                       :key&#x3D;&quot;item.id&quot;&gt;&lt;&#x2F;el-option&gt;</span><br><span class="line">            &#x2F;&#x2F; 注意 value的写法，可以直接写成 :value&#x3D;&quot;item&quot; ,如果不希望form.chooseObj里面的数据太杂，也可以写成上面的这种</span><br><span class="line">        &lt;&#x2F;el-select&gt;</span><br><span class="line">    &lt;&#x2F;el-form-item&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">		return &#123;</span><br><span class="line">			form: &#123; </span><br><span class="line">                chooseObj: &#123;&#125;, &#x2F;&#x2F; 选中的数据对象</span><br><span class="line">             &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">        &#x2F;&#x2F; 省略接口请求，假设请求返回对象data，里面包含选项的 id 和 name</span><br><span class="line">        let data &#x3D; &#123;</span><br><span class="line">            id: &#39;1&#39;,</span><br><span class="line">            name: &#39;语文&#39;</span><br><span class="line">        &#125;;</span><br><span class="line">        this.getData(data);</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        &#x2F;&#x2F; 从接口获取当前所选的数据，渲染至页面</span><br><span class="line">        getData(data) &#123;</span><br><span class="line">            this.form.chooseObj.id &#x3D; data.id;</span><br><span class="line">            this.form.chooseObj.name &#x3D; data.name;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 保存时</span><br><span class="line">        save() &#123;</span><br><span class="line">            let id &#x3D; this.form.chooseObj.id,</span><br><span class="line">                name &#x3D; this.form.chooseObj.name;</span><br><span class="line">            &#x2F;&#x2F; 保存接口请求发起...</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ElementUI</category>
      </categories>
  </entry>
  <entry>
    <title>hexo文章中使用图片</title>
    <url>/2020/10/19/hexo%E6%96%87%E7%AB%A0%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image@1.0.0 --save</span><br></pre></td></tr></table></figure>

<p>我用的版本是@1.0.0，如果想要最新版本，去掉安装的时候去掉@1.0.0即可</p>
<a id="more"></a>

<h4 id="修改相关配置"><a href="#修改相关配置" class="headerlink" title="修改相关配置"></a>修改相关配置</h4><p>打开hexo的项目配置文件<code>_config.yml</code>，全局搜索<code>post_asset_folder</code>，将选项值修改为<code>true</code></p>
<h4 id="手动修改hexo-asset-image包里面的index-js"><a href="#手动修改hexo-asset-image包里面的index-js" class="headerlink" title="手动修改hexo-asset-image包里面的index.js"></a>手动修改hexo-asset-image包里面的index.js</h4><p>路径为：<code>/node_modules/hexo-asset-image/index.js</code></p>
<p>将原来的内容替换为下面的内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">'.'</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">        <span class="keyword">var</span> link = data.permalink;</span><br><span class="line">    <span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">       <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line">    <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'src'</span>))&#123;</span><br><span class="line">            <span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line">            <span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">               !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">              <span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line">              <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">              <span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">                srcArray.shift();</span><br><span class="line">              src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line">              $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line">              <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"update link as:--&gt;"</span>+config.root + link + src);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="keyword">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p><code>hexo n</code>新建文章之后，会在md文件的同级目录下自动帮你新建一个同名文件夹，用来存放这篇文章的图片</p>
<p>把要使用的图片放进文件夹中，然后在对应的md文件中使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![图片替代文字](xxx.jpg)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
  </entry>
  <entry>
    <title>npm设置淘宝镜像</title>
    <url>/2020/09/08/npm%E8%AE%BE%E7%BD%AE%E6%B7%98%E5%AE%9D%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><blockquote>
<p>cnpm形式</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将npm配置为淘宝镜像</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="查看当前配置"><a href="#查看当前配置" class="headerlink" title="查看当前配置"></a>查看当前配置</h3><blockquote>
<p>cnpm查看</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm config get registry</span><br></pre></td></tr></table></figure>

<blockquote>
<p>npm查看当前配置</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>

<h3 id="删除淘宝镜像配置"><a href="#删除淘宝镜像配置" class="headerlink" title="删除淘宝镜像配置"></a>删除淘宝镜像配置</h3><blockquote>
<p>删除cnpm</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall cnpm -g</span><br></pre></td></tr></table></figure>
<blockquote>
<p>删除当前npm的淘宝镜像配置</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config delete registry</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
  </entry>
  <entry>
    <title>pdf.js+canvas+vue实现h5预览pdf文件（支持放大缩小）</title>
    <url>/2020/07/07/pdf-js-canvas-vue%E5%AE%9E%E7%8E%B0h5%E9%A2%84%E8%A7%88pdf%E6%96%87%E4%BB%B6%EF%BC%88%E6%94%AF%E6%8C%81%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>实现思路：引入了pdfjs-dist的npm包，从后端拿到pdf的数据之后（base64），利用pdf.js拿到pdf相关信息，然后创建一个canvas（我这里是pdf的一页作为一个canvas标签），再经由pdf.js进行最后一系列的渲染</p>
</blockquote>
<a id="more"></a>

<p>前期准备：</p>
<p>引入npm包 <code>pdfjs-dist@2.4.456</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install pdfjs-dist --save &#x2F;&#x2F; --save保存依赖</span><br><span class="line"></span><br><span class="line">cnpm install pdfjs-dist --save &#x2F;&#x2F; 也可以用cnpm</span><br><span class="line"></span><br><span class="line">npm install pdfjs-dist@2.4.456 --save &#x2F;&#x2F; 如果想要指定版本</span><br></pre></td></tr></table></figure>

<p>核心API：</p>
<p><code>getDocument()</code>：用于异步获取PDf文档，发送多个Ajax请求以块的形式下载文档。它返回一个Promise，该Promise的成功回调传递一个对象，该对象包含PDF文档的信息，该回调中的代码将在完成PDf文档获取时执行。</p>
<p><code>getPage()</code>：用于获取PDF文档中的各个页面。</p>
<p><code>getViewport()</code>：针对提供的展示比例，返回PDf文档的页面尺寸。</p>
<p><code>render()</code>：渲染PDF。</p>
<p>注意：</p>
<ol>
<li>如果有报类似的错误：<code>PDFDocumentLoadingTask.then method use the</code>promise<code>getter instead.</code>，检查一下在代码中的.then前面有没有加<code>promise</code></li>
<li>btoa和atob是window对象的两个函数，其中btoa是binary to ascii，用于将binary的数据用ascii码表示，即Base64的编码过程，而atob则是ascii to binary，用于将ascii码解析成binary数据</li>
<li>报错<code>Cannot read property &#39;WorkerMessageHandler&#39; of undefined</code>，一般是<code>PDF.GlobalWorkerOptions.workerSrc</code>的url不对，即没有正确引入pdf.work.js</li>
</ol>
<h3 id="代码如下，具体看注释，踩过了很多坑，都写在注释里了："><a href="#代码如下，具体看注释，踩过了很多坑，都写在注释里了：" class="headerlink" title="代码如下，具体看注释，踩过了很多坑，都写在注释里了："></a>代码如下，具体看注释，踩过了很多坑，都写在注释里了：</h3><p>pdf.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"canvas-area"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 拿到pdf后会动态往这里添加canvas元素，有多少页就有多少个canvas --&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"control"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 点击放大 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"scale-btn"</span> @<span class="attr">click</span>=<span class="string">"scalePDF('add')"</span>&gt;</span>＋<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 点击缩小 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"scale-btn"</span> @<span class="attr">click</span>=<span class="string">"scalePDF"</span>&gt;</span>－<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 引入pdf.js，负责API解析</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> PDF <span class="keyword">from</span> <span class="string">'pdfjs-dist'</span>;</span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="comment">// 引入pdf.worker.js，负责核心解析</span></span></span><br><span class="line"><span class="actionscript">    PDF.GlobalWorkerOptions.workerSrc = <span class="string">'https://cdn.bootcss.com/pdf.js/2.4.456/pdf.worker.js'</span>;</span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="comment">// 网上其他文章写着下面这样引入pdf.worker.js，但我这边会报错，所以找了上面这一个cdn链接，但需注意：我看网上有文章引入的链接是需要翻墙的，但总不能要求用户在使用过程中一定要翻墙吧？所以一定要找大陆能直接访问的链接</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// PDF.GlobalWorkerOptions.workerSrc = 'pdfjs-dist/build/pdf.worker.js';</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">        name: <span class="string">"pdf"</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                pdfView: &#123;&#125;, <span class="comment">// 缓存pdf数据</span></span></span><br><span class="line"><span class="actionscript">                pdfScale: <span class="number">1</span>, <span class="comment">// 当前缩放</span></span></span><br><span class="line"><span class="actionscript">                pdfScaleMax: <span class="number">2</span>, <span class="comment">// 最大缩放</span></span></span><br><span class="line"><span class="actionscript">                pdfScaleMin: <span class="number">0.4</span>, <span class="comment">// 最小缩放</span></span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.getPDF();</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            getPDF() &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 这个链接是引入字体包，解决无法显示中文的问题</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">const</span> CURL = <span class="string">'https://cdn.jsdelivr.net/npm/pdfjs-dist@2.4.456/cmaps/'</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> base64Data,</span></span><br><span class="line">                    pdfData,</span><br><span class="line">                    loadingTask;</span><br><span class="line">                    </span><br><span class="line"><span class="actionscript">                base64Data = <span class="string">'JVBERi0xLjcKCjEgMCBvYmogICUgZW50cnkgcG9pbnQKPDwKICAvVHlwZSAvQ2F0YWxvZwog'</span> +</span></span><br><span class="line"><span class="actionscript">                    <span class="string">'IC9QYWdlcyAyIDAgUgo+PgplbmRvYmoKCjIgMCBvYmoKPDwKICAvVHlwZSAvUGFnZXMKICAv'</span> +</span></span><br><span class="line"><span class="actionscript">                    <span class="string">'TWVkaWFCb3ggWyAwIDAgMjAwIDIwMCBdCiAgL0NvdW50IDEKICAvS2lkcyBbIDMgMCBSIF0K'</span> +</span></span><br><span class="line"><span class="actionscript">                    <span class="string">'Pj4KZW5kb2JqCgozIDAgb2JqCjw8CiAgL1R5cGUgL1BhZ2UKICAvUGFyZW50IDIgMCBSCiAg'</span> +</span></span><br><span class="line"><span class="actionscript">                    <span class="string">'L1Jlc291cmNlcyA8PAogICAgL0ZvbnQgPDwKICAgICAgL0YxIDQgMCBSIAogICAgPj4KICA+'</span> +</span></span><br><span class="line"><span class="actionscript">                    <span class="string">'PgogIC9Db250ZW50cyA1IDAgUgo+PgplbmRvYmoKCjQgMCBvYmoKPDwKICAvVHlwZSAvRm9u'</span> +</span></span><br><span class="line"><span class="actionscript">                    <span class="string">'dAogIC9TdWJ0eXBlIC9UeXBlMQogIC9CYXNlRm9udCAvVGltZXMtUm9tYW4KPj4KZW5kb2Jq'</span> +</span></span><br><span class="line"><span class="actionscript">                    <span class="string">'Cgo1IDAgb2JqICAlIHBhZ2UgY29udGVudAo8PAogIC9MZW5ndGggNDQKPj4Kc3RyZWFtCkJU'</span> +</span></span><br><span class="line"><span class="actionscript">                    <span class="string">'CjcwIDUwIFRECi9GMSAxMiBUZgooSGVsbG8sIHdvcmxkISkgVGoKRVQKZW5kc3RyZWFtCmVu'</span> +</span></span><br><span class="line"><span class="actionscript">                    <span class="string">'ZG9iagoKeHJlZgowIDYKMDAwMDAwMDAwMCA2NTUzNSBmIAowMDAwMDAwMDEwIDAwMDAwIG4g'</span> +</span></span><br><span class="line"><span class="actionscript">                    <span class="string">'CjAwMDAwMDAwNzkgMDAwMDAgbiAKMDAwMDAwMDE3MyAwMDAwMCBuIAowMDAwMDAwMzAxIDAw'</span> +</span></span><br><span class="line"><span class="actionscript">                    <span class="string">'MDAwIG4gCjAwMDAwMDAzODAgMDAwMDAgbiAKdHJhaWxlcgo8PAogIC9TaXplIDYKICAvUm9v'</span> +</span></span><br><span class="line"><span class="actionscript">                    <span class="string">'dCAxIDAgUgo+PgpzdGFydHhyZWYKNDkyCiUlRU9G'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                pdfData = atob(base64Data); <span class="comment">// 解码base64，这里的base64应由后台接口返回，示例中省了接口请求的步骤，直接写死数据</span></span></span><br><span class="line">                </span><br><span class="line"><span class="actionscript">                <span class="comment">// 加载要打开的pdf</span></span></span><br><span class="line">                loadingTask = PDF.getDocument(&#123;</span><br><span class="line"><span class="actionscript">                    data: pdfData, <span class="comment">// 解码base64之后的数据</span></span></span><br><span class="line"><span class="actionscript">                    cMapUrl: CURL, <span class="comment">// 无法显示中文的话，就添加下面这两个cMapUrl、cMapPacked参数</span></span></span><br><span class="line"><span class="actionscript">                    cMapPacked: <span class="literal">true</span></span></span><br><span class="line">                &#125;);</span><br><span class="line">                </span><br><span class="line"><span class="actionscript">                <span class="comment">// 网上有文章是下面这样用的，但是有可能会中文显示不了。这里的url是pdf在线地址，或者是pdf本地路径，以.pdf结尾</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// loadingTask = PDF.getDocument(pdfURL);</span></span></span><br><span class="line">                </span><br><span class="line"><span class="javascript">                loadingTask.promise.then(<span class="function"><span class="params">pdf</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.pdfView = pdf; <span class="comment">// 缓存pdf文档相关信息，当用户缩放时不必再次请求数据</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> pageCount = pdf.numPages; <span class="comment">// 获取pdf总页数</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= pageCount; i++) &#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.addPage(i, pageCount); <span class="comment">// 循环总页数，生成canvas</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, err =&gt; &#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'文档生成发生异常：'</span>, err);</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 添加canvas元素，每一页为一个canvas，pageNumber为当前页，pageCount为总页数</span></span></span><br><span class="line">            addPage(pageNumber, pageCount) &#123;</span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.pdfView.getPage(pageNumber).then(<span class="function"><span class="params">page</span> =&gt;</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> viewport,</span></span><br><span class="line">                        canvas,</span><br><span class="line">                        el_canvasDiv,</span><br><span class="line">                        context,</span><br><span class="line">                        renderContext,</span><br><span class="line">                        renderTask;</span><br><span class="line"></span><br><span class="line"><span class="javascript">                    canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>); <span class="comment">//在页面中创建canvas</span></span></span><br><span class="line"><span class="actionscript">                    canvas.id = <span class="string">"canvas_"</span> + pageNumber; <span class="comment">// 给每个canvas元素添加id</span></span></span><br><span class="line"><span class="javascript">                    el_canvasDiv = <span class="built_in">document</span>.querySelector(<span class="string">'#canvas-area'</span>);</span></span><br><span class="line"><span class="actionscript">                    el_canvasDiv.appendChild(canvas); <span class="comment">// 追加子元素到canvas-area</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    context = canvas.getContext(<span class="string">'2d'</span>); <span class="comment">// 获取作用于画布的API</span></span></span><br><span class="line"><span class="actionscript">                    viewport = page.getViewport(&#123;scale: <span class="keyword">this</span>.pdfScale&#125;); <span class="comment">// 根据自定义的缩放倍数以及文档返回的比例，获取在页面展示的宽高</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 注意网上有文章的传参是下面这样写的，会报错：</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// viewport = page.getViewport(this.pdfScale);</span></span></span><br><span class="line"><span class="actionscript">                    canvas.height = viewport.height; <span class="comment">// 赋值</span></span></span><br><span class="line">                    canvas.width = viewport.width;</span><br><span class="line">                    </span><br><span class="line">                    renderContext = &#123;</span><br><span class="line"><span class="actionscript">                        canvasContext: context, <span class="comment">// 内容</span></span></span><br><span class="line"><span class="actionscript">                        viewport: viewport <span class="comment">// 视口</span></span></span><br><span class="line">                    &#125;;</span><br><span class="line"><span class="actionscript">                    renderTask = page.render(renderContext); <span class="comment">// 开始渲染</span></span></span><br><span class="line"><span class="javascript">                    renderTask.promise.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 渲染完毕后的业务操作</span></span></span><br><span class="line">                        if (pageNumber === pageCount) &#123;</span><br><span class="line"><span class="actionscript">                            <span class="comment">// 当渲染完最后一页，说明渲染完毕</span></span></span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(<span class="string">'渲染完成'</span>);</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 注意这里网上有人会写成下面这样，会报错，需要加promise</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// renderTask.then(() =&gt; &#123;&#125;)</span></span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 缩放pdf，这里是把原来的canvas删除重新按新的缩放倍数生成新的canvas</span></span></span><br><span class="line">            scalePDF(type) &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (type === <span class="string">'add'</span> &amp;&amp; <span class="keyword">this</span>.pdfScale === <span class="keyword">this</span>.pdfScaleMax) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'已缩放至最大'</span>);</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (type !== <span class="string">'add'</span> &amp;&amp; <span class="keyword">this</span>.pdfScale === <span class="keyword">this</span>.pdfScaleMin) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'已缩放至最小'</span>);</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (type === <span class="string">'add'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// calculate是自己定义的公共对象，四则运算，加和减</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.pdfScale = calculate.add(<span class="keyword">this</span>.pdfScale, <span class="number">0.2</span>);</span></span><br><span class="line"><span class="actionscript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.pdfScale = calculate.sub(<span class="keyword">this</span>.pdfScale, <span class="number">0.2</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> parentNode = <span class="built_in">document</span>.getElementById(<span class="string">'canvasDiv'</span>),</span></span><br><span class="line"><span class="javascript">                    canvasElements = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'canvas'</span>),</span></span><br><span class="line"><span class="actionscript">                    pageCount = <span class="keyword">this</span>.pdfView.numPages;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 删除原有的canvas元素</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> i=canvasElements.length<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</span></span><br><span class="line">                    parentNode.removeChild(canvasElements[i]);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 重新生成</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= pageCount; i++) &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.addPage(i, pageCount);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#canvas-area</span> &#123;</span></span><br><span class="line">        overflow: auto;</span><br><span class="line">        text-align: center;</span><br><span class="line">        canvas &#123;</span><br><span class="line">            border: 2px solid red;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.control</span> &#123;</span></span><br><span class="line">        position: fixed;</span><br><span class="line"><span class="css">        <span class="selector-tag">right</span>: <span class="selector-class">.2rem</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">bottom</span>: 1<span class="selector-class">.5rem</span>;</span></span><br><span class="line">        width: 1rem;</span><br><span class="line"><span class="css">        <span class="selector-tag">height</span>: 1<span class="selector-class">.8rem</span>;</span></span><br><span class="line">        display: flex;</span><br><span class="line">        flex-direction: column;</span><br><span class="line">        align-items: center;</span><br><span class="line">        justify-content: space-between;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.scale-btn</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-id">#e2e2e2</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span>: <span class="selector-class">.76rem</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span>: <span class="selector-class">.76rem</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">line-height</span>: <span class="selector-class">.76rem</span>;</span></span><br><span class="line">        text-align: center;</span><br><span class="line">        border-radius: 50%;</span><br><span class="line">        z-index: 99;</span><br><span class="line"><span class="css">        <span class="selector-tag">font-size</span>: <span class="selector-class">.3rem</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考资料：</p>
<p><em>官方文档： <a href="http://mozilla.github.io/pdf.js/" target="_blank" rel="noopener">http://mozilla.github.io/pdf.js/</a></em></p>
<p><em><a href="https://www.jianshu.com/p/9cd4840f9323" target="_blank" rel="noopener">https://www.jianshu.com/p/9cd4840f9323</a></em></p>
<p><em><a href="https://segmentfault.com/a/1190000016963084" target="_blank" rel="noopener">https://segmentfault.com/a/1190000016963084</a></em></p>
<p><em><a href="https://stackoverflow.com/questions/58375825/viewport-problem-using-javascript-pdf-js-viewport" target="_blank" rel="noopener">https://stackoverflow.com/questions/58375825/viewport-problem-using-javascript-pdf-js-viewport</a></em></p>
<p><em><a href="https://my.oschina.net/itblog/blog/1613977" target="_blank" rel="noopener">https://my.oschina.net/itblog/blog/1613977</a></em></p>
<p><em><a href="https://github.com/mozilla/pdf.js/issues/11787" target="_blank" rel="noopener">https://github.com/mozilla/pdf.js/issues/11787</a></em></p>
]]></content>
      <categories>
        <category>canvas</category>
      </categories>
  </entry>
  <entry>
    <title>uni小程序富文本组件处理图片宽度溢出</title>
    <url>/2020/05/15/uni%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BB%84%E4%BB%B6%E5%A4%84%E7%90%86%E5%9B%BE%E7%89%87%E5%AE%BD%E5%BA%A6%E6%BA%A2%E5%87%BA/</url>
    <content><![CDATA[<p>接口返回文本编辑器的内容字段后，进行如下处理：</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let str;</span><br><span class="line">str &#x3D; res.data.content || &#39;&#39;; &#x2F;&#x2F; 获取接口返回</span><br><span class="line">str &#x3D; str.replace(&#x2F;&lt;&#x2F;g, &#39;&lt;&#39;) </span><br><span class="line">.replace(&#x2F;&gt;&#x2F;g, &#39;&gt;&#39;)</span><br><span class="line">.replace(&#x2F;&lt;img([\s\w&quot;-&#x3D;\&#x2F;\.:;]+)((?:(height&#x3D;&quot;[^&quot;]+&quot;)))&#x2F;ig, &#39;&lt;img$1&#39;)</span><br><span class="line">.replace(&#x2F;&lt;img([\s\w&quot;-&#x3D;\&#x2F;\.:;]+)((?:(width&#x3D;&quot;[^&quot;]+&quot;)))&#x2F;ig, &#39;&lt;img$1&#39;)</span><br><span class="line">.replace(&#x2F;&lt;img([\s\w&quot;-&#x3D;\&#x2F;\.:;]+)((?:(style&#x3D;&quot;[^&quot;]+&quot;)))&#x2F;ig, &#39;&lt;img$1&#39;)</span><br><span class="line">.replace(&#x2F;&lt;img([\s\w&quot;-&#x3D;\&#x2F;\.:;]+)((?:(alt&#x3D;&quot;[^&quot;]+&quot;)))&#x2F;ig, &#39;&lt;img$1&#39;)</span><br><span class="line">.replace(&#x2F;&lt;img([\s\w&quot;-&#x3D;\&#x2F;\.:;]+)&#x2F;ig, &#39;&lt;img style&#x3D;&quot;width: 100%;&quot; $1&#39;);</span><br></pre></td></tr></table></figure>

<p>处理后宽度就不会溢出了：<br><img src="/2020/05/15/uni%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BB%84%E4%BB%B6%E5%A4%84%E7%90%86%E5%9B%BE%E7%89%87%E5%AE%BD%E5%BA%A6%E6%BA%A2%E5%87%BA/pic.png" alt="pic"></p>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
  </entry>
  <entry>
    <title>uni小程序页面获取传参</title>
    <url>/2020/05/15/uni%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A1%B5%E9%9D%A2%E8%8E%B7%E5%8F%96%E4%BC%A0%E5%8F%82/</url>
    <content><![CDATA[<h4 id="前一个页面传值给下一个页面"><a href="#前一个页面传值给下一个页面" class="headerlink" title="前一个页面传值给下一个页面"></a>前一个页面传值给下一个页面</h4><blockquote>
<p>uni.navigateTo(); 保留当前页面，跳转到应用内的某个页面，使用uni.navigateBack() 可以返回到原页面</p>
</blockquote>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uni.navigateTo(&#123;</span><br><span class="line">    url: &#39;test?id&#x3D;1&amp;name&#x3D;&#39; + encodeURIComponent(JSON.stringify(name))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>注意：url传参有长度限制，太长时可通过对参数进行 转码+序列化 的方法传过去</p>
<p>在下一个页面接收值（需要相应的反序列化、解码）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">onLoad(e) &#123;</span><br><span class="line">	this.id &#x3D; e.id;</span><br><span class="line">	this.name &#x3D; JSON.parse(decodeURIComponent(e.name));</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="下一个页面在返回前传值给前一个页面"><a href="#下一个页面在返回前传值给前一个页面" class="headerlink" title="下一个页面在返回前传值给前一个页面"></a>下一个页面在返回前传值给前一个页面</h4><p>举例，从A页面通过navigateTo到B页面，B页面有一个参数需要传回给A页面，在B页面可进行如下操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let pages &#x3D; getCurrentPages();  &#x2F;&#x2F;获取所有页面栈实例列表</span><br><span class="line">let nowPage &#x3D; pages[ pages.length - 1];  &#x2F;&#x2F;当前页页面实例</span><br><span class="line">let prevPage &#x3D; pages[ pages.length - 2 ];  &#x2F;&#x2F;上一页页面实例</span><br><span class="line">prevPage.$vm.searchVal &#x3D; 1211;   &#x2F;&#x2F;修改上一页data里面的searchVal参数值为1211</span><br><span class="line">uni.navigateBack(&#123;  &#x2F;&#x2F;uni.navigateTo跳转的返回，如果带任何参数配置，默认返回上一级</span><br><span class="line">	delta: 1</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">————————————————</span><br><span class="line">原文链接：https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_42231156&#x2F;java&#x2F;article&#x2F;details&#x2F;99674176</span><br></pre></td></tr></table></figure>

<p>注意，B页面在返回时已经对A页面的searchVal的值进行了修改，如果需要触发A页面的相关操作，则需要在A页面的onShow页面周期中进行触发</p>
<p>另一种修改A页面的值的方法如下（替换上面的prevPage.$vm.searchVal = 1211），但是个人没试过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">prevPage.setData(&#123;</span><br><span class="line">    searchVal: 1211,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="通过好友链接分享传值"><a href="#通过好友链接分享传值" class="headerlink" title="通过好友链接分享传值"></a>通过好友链接分享传值</h4><p>有时候会有这样的情景：分享详情页时，当另一个人从分享链接打开进到这个页面时，需要一个id才能请求接口获取详情数据，因此就需要在分享的时候把这个id传过来，在打开的时候拿到这个id去请求数据</p>
<p>在于onShow生命周期同级加入onShareAppMessage函数，才能开启页面分享</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onShareAppMessage() &#123;</span><br><span class="line">	<span class="comment">// 转发</span></span><br><span class="line">	wx.showShareMenu(&#123;</span><br><span class="line">	  withShareTicket: <span class="literal">true</span></span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		title: title, <span class="comment">// 分享链接的title</span></span><br><span class="line">		path: <span class="string">'/xxx/xxx?id=1234'</span>, <span class="comment">// 分享打开时的页面路径</span></span><br><span class="line">		imageUrl: imageUrl, <span class="comment">// 分享链接的图片</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当好友从链接打开时，页面会走到上面path定义的路径当中，这时候要获取id，方法和上一种url传参一样，在页面onLoad生命周期中获取</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onLoad(e) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(e.id);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="通过扫二维码进来的页面如何获取传参值"><a href="#通过扫二维码进来的页面如何获取传参值" class="headerlink" title="通过扫二维码进来的页面如何获取传参值"></a>通过扫二维码进来的页面如何获取传参值</h4><p>二维码扫码进来，要获取生成二维码时传的自定义参数，也和上面类似方式获取，只不过相当于小程序自动加了一个scene字段存储传参信息，获取如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onLoad(e) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="built_in">decodeURIComponent</span>(e.scene));</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>注意一定要对scene字段进行decodeURIComponent处理</p>
<p>关于二维码限制传参长度（只有几十个字符）的问题，一般的做法是，将所需的传参先走我们自己的接口，在后台临时存储，然后后台生成一个类似缓存ID的标识（长度一定不能超过微信的限制），再把缓存ID通过生成二维码的接口传过去去获取二维码。在扫码打开后的页面，通过decodeURIComponent(e.scene)获取到的值，就是缓存ID，此时再通过自己的接口，用缓存ID去查询生成二维码时候的传参</p>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
  </entry>
  <entry>
    <title>vue项目中使用【eslint】【prettier】【husky】【lint-staged】进行代码检查与代码格式化</title>
    <url>/2020/09/18/vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8ESLint-Prettier-Husky-Lint-staged%E8%BF%9B%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%E4%B8%8E%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
    <content><![CDATA[<h3 id="Prettier-代码格式化"><a href="#Prettier-代码格式化" class="headerlink" title="Prettier 代码格式化"></a>Prettier 代码格式化</h3><p>局部安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -D prettier</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>在项目根目录下创建<code>.prettierrc.js</code>配置文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .prettierrc.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 是否添加尾随逗号</span></span><br><span class="line">  trailingComma: <span class="string">'es5'</span>,</span><br><span class="line">  <span class="comment">// jsx使用单引号</span></span><br><span class="line">  jsxSingleQuote: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 对象大括号之间的空格  true- 例子：&#123; foo: bar &#125;</span></span><br><span class="line">  bracketSpacing: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 将&gt;多行JSX元素放在最后一行的末尾，而不是单独放在下一行（不适用于自闭元素）</span></span><br><span class="line">  jsxBracketSameLine: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 指定HTML文件的全局空白区域敏感度</span></span><br><span class="line">  htmlWhitespaceSensitivity: <span class="string">'css'</span>,</span><br><span class="line">  <span class="comment">// 使用单引号, 默认false(在jsx中配置无效, 默认都是双引号)</span></span><br><span class="line">  semi: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// tab缩进大小,默认为2</span></span><br><span class="line">  tabWidth: <span class="number">4</span>,</span><br><span class="line">  <span class="comment">// 使用tab缩进，默认false</span></span><br><span class="line">  useTabs: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 使用单引号, 默认true</span></span><br><span class="line">  singleQuote: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 箭头函数的argument是否需要打括号，默认avoid，必要时需要括号</span></span><br><span class="line">  arrowParens: <span class="string">'avoid'</span>,</span><br><span class="line">  <span class="comment">// 指定代码换行的行长度</span></span><br><span class="line">  printWidth: <span class="number">240</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如果使用了webstorm编辑器，那么上面两个步骤走完之后，在文件中右键，应该会有<code>Reformat with Prettier</code>的字样，可以对当前的这个文件进行格式化</p>
<p>如果想要项目全局一次性使用prettier格式化，可以在<code>package.json</code>中写入脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; package.json</span><br><span class="line"></span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;prettier&quot;: &quot;prettier --write \&quot;src&#x2F;**&#x2F;*.&#123;js,vue&#125;\&quot;&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>如果<code>.prettierrc.js</code>配置文件中的缩进不生效，请查看是否与项目下的<code>.editorconfig</code>中的缩进有冲突</p>
<h3 id="ESLint代码检查"><a href="#ESLint代码检查" class="headerlink" title="ESLint代码检查"></a>ESLint代码检查</h3><p>安装所需依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 推荐局部安装，因为每个项目的实际情况会不一样</span><br><span class="line">npm i -D eslint-plugin-vue eslint-plugin-vue-scoped-css eslint-plugin-jsdoc babel-eslint eslint</span><br><span class="line">&#x2F;&#x2F; 下面是执行代码检查脚本所需的依赖</span><br><span class="line">npm i -D @vue&#x2F;cli-plugin-eslint @vue&#x2F;cli-service</span><br></pre></td></tr></table></figure>

<p>简单说下每个依赖包的用处</p>
<ul>
<li><code>eslint-plugin-vue</code> Vue官方提供了一个官方插件，更好处理.vue文件中的js代码</li>
</ul>
<p>项目下新建ESlint配置文件<code>.eslintrc.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	<span class="string">"root"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"env"</span>: &#123;</span><br><span class="line">		<span class="string">"node"</span>: <span class="literal">true</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">"rules"</span>: &#123;</span><br><span class="line">		<span class="string">"no-console"</span>: [<span class="string">"warn"</span>, &#123; <span class="string">"allow"</span>: [<span class="string">"warn"</span>, <span class="string">"error"</span>, <span class="string">"info"</span>] &#125;],</span><br><span class="line">		<span class="string">"no-debugger"</span>: <span class="number">1</span>,</span><br><span class="line">		<span class="string">"semi"</span>: [<span class="number">2</span>, <span class="string">"always"</span>],</span><br><span class="line">		<span class="string">"vue/no-use-v-if-with-v-for"</span>: [<span class="number">2</span>, &#123; <span class="string">"allowUsingIterationVar"</span>: <span class="literal">false</span> &#125;],</span><br><span class="line">		<span class="string">"comma-dangle"</span>: <span class="string">"off"</span>,</span><br><span class="line">		<span class="string">"one-var"</span>: [</span><br><span class="line">			<span class="string">"warn"</span>,</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="string">"var"</span>: <span class="string">"always"</span>,</span><br><span class="line">				<span class="string">"let"</span>: <span class="string">"always"</span>,</span><br><span class="line">				<span class="string">"const"</span>: <span class="string">"never"</span></span><br><span class="line">			&#125;</span><br><span class="line">		],</span><br><span class="line">		<span class="string">"no-throw-literal"</span>: <span class="number">0</span>,</span><br><span class="line">		<span class="string">"no-new-wrappers"</span>: <span class="number">2</span>,</span><br><span class="line">		<span class="string">"no-useless-escape"</span>: <span class="number">0</span>,</span><br><span class="line">		<span class="string">"no-redeclare"</span>: <span class="number">2</span>,</span><br><span class="line">		<span class="string">"no-tabs"</span>: <span class="number">0</span>,</span><br><span class="line">		<span class="string">"no-mixed-spaces-and-tabs"</span>: <span class="number">1</span>,</span><br><span class="line">		<span class="string">"space-before-function-paren"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],</span><br><span class="line">		<span class="string">"no-unused-vars"</span>: <span class="number">1</span>,</span><br><span class="line">		<span class="string">"vue-scoped-css/require-scoped"</span>: <span class="number">2</span>,</span><br><span class="line">		<span class="string">"no-dupe-keys"</span>: <span class="number">2</span>,</span><br><span class="line">		<span class="string">"no-func-assign"</span>: <span class="number">2</span>,</span><br><span class="line">		<span class="string">"valid-typeof"</span>: <span class="number">2</span>,</span><br><span class="line">		<span class="string">"no-shadow"</span>: <span class="number">0</span>,</span><br><span class="line">		<span class="string">"no-prototype-builtins"</span>: <span class="number">0</span>,</span><br><span class="line">		<span class="string">"no-undef"</span>: <span class="number">0</span>,</span><br><span class="line">		<span class="string">"no-irregular-whitespace"</span>: <span class="number">1</span>,</span><br><span class="line">		<span class="string">"vue/custom-event-name-casing"</span>: <span class="number">1</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">"overrides"</span>: [</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="string">"files"</span>: [<span class="string">"*.vue"</span>],</span><br><span class="line">			<span class="string">"rules"</span>: &#123;</span><br><span class="line">				<span class="string">"indent"</span>: <span class="string">"off"</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	],</span><br><span class="line">	<span class="string">"parserOptions"</span>: &#123;</span><br><span class="line">		<span class="string">"parser"</span>: <span class="string">"babel-eslint"</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">"extends"</span>: [<span class="string">"plugin:vue/essential"</span>, <span class="string">"plugin:vue-scoped-css/base"</span>, <span class="string">"eslint:recommended"</span>, <span class="string">"plugin:jsdoc/recommended"</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在项目根目录下的<code>package.json</code>中配置检查脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;lint&quot;: &quot;vue-cli-service lint&quot;,</span><br><span class="line">    &quot;lint-fix&quot;: &quot;eslint --fix --ext .vue,.js&quot;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>执行<code>npm run lint</code>可进行src目录下的所有代码检查</p>
<p>如果要单独检查某个文件夹，可使用<code>npm run lint ./src/xxx</code></p>
<p>使用<code>npm run lint-fix</code>时后面必须要指定路径，这里配置是为了配合下面的<code>lint-staged</code>使用的</p>
<h3 id="使用Husky和lint-staged执行git提交前的代码规范检查"><a href="#使用Husky和lint-staged执行git提交前的代码规范检查" class="headerlink" title="使用Husky和lint-staged执行git提交前的代码规范检查"></a>使用Husky和lint-staged执行git提交前的代码规范检查</h3><p>局部安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -D husky lint-staged</span><br></pre></td></tr></table></figure>

<p><code>husky</code>是一种帮助我们使用<code>git hooks</code>的工具，其中<code>pre-commit</code>就是众多<code>hooks</code>中的其中一个，可以在<code>git commit</code>之前自定义做一些事情，比如进行代码格式化与标准规范检查</p>
<p><code>lint-staged</code>是用来对<code>git add</code>之后进入暂存区的文件进行eslint检查的，如果不使用<code>lint-staged</code>，每次执行全局检查，当项目大到一定程度时就很耗时了。<code>lint-staged</code>只会对你需要提交的代码文件进行检查</p>
<p>在<code>package.json</code>进行相关配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;husky&quot;: &#123;</span><br><span class="line">	&quot;hooks&quot;: &#123;</span><br><span class="line">		&quot;pre-commit&quot;: &quot;lint-staged&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;lint-staged&quot;: &#123;</span><br><span class="line">	&quot;src&#x2F;**&#x2F;*.&#123;js,vue,ts.tsx&#125;&quot;: [</span><br><span class="line">		&quot;npm run prettier&quot;,</span><br><span class="line">		&quot;npm run lint-fix&quot;,</span><br><span class="line">		&quot;git add&quot;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：这里的<code>npm run prettier</code>和<code>npm run lint-fix</code>都是上面写prettier和eslint的时候在package.json中配置好的脚本</p>
<p>配置完之后，我们每次提交代码时将会先对暂存区的文件进行prettier格式化，然后进行eslint语法检查，最后提交文件，如果语法检查出现error，将会提示错误信息，并且中断此次提交。需要手动修复error之后再次进行提交</p>
<p>另外，husky里面的东西可以单独写在一个叫<code>.huskyrc</code>文件里面，存放位置为项目根目录下</p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><blockquote>
<p>eslint-loader</p>
</blockquote>
<p>Vue CLI 是支持热更新的，即修改文件后触发 webpack 打包逻辑，使用 eslint-loader 能够让 webpack 工作前执行 ESLint 检查</p>
<blockquote>
<p>eslint-plugin-prettier</p>
</blockquote>
<p>eslint-plugin-prettier 是 Prettier 为 ESLint 开发的插件，使用它，可以在 eslint 中起到 prettier 检查</p>
<blockquote>
<p>eslint-config-prettier</p>
</blockquote>
<p>把格式化相关的事情都交给 prettier 去做，使用这个工具可以屏蔽掉 ESLint 与格式化相关的 rule</p>
<blockquote>
<p>prettier-eslint</p>
</blockquote>
<p>ESLint 本身有 fix 的功能，即eslint –fix，如果想让执行该功能的时候，也调用 prettier 的 fix 功能（即prettier –write），可以使用该工具</p>
]]></content>
      <categories>
        <category>eslint+prettier</category>
      </categories>
  </entry>
  <entry>
    <title>vue-i18n国际化</title>
    <url>/2020/08/31/vue-i18n%E5%9B%BD%E9%99%85%E5%8C%96/</url>
    <content><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>在vue项目中使用vue-i18n进行国际化（业务需求，本文例子中只考虑中英互译）</p>
<h3 id="触发形式"><a href="#触发形式" class="headerlink" title="触发形式"></a>触发形式</h3><p>项目初始化时会读取当前系统的语言环境（手机端以手机系统的语言为准，pc端预览H5时以浏览器的语言为准），并将对应的翻译配置文件进行切换</p>
<a id="more"></a>

<h3 id="安装vue-i18n依赖包"><a href="#安装vue-i18n依赖包" class="headerlink" title="安装vue-i18n依赖包"></a>安装vue-i18n依赖包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 这里指定了版本，--save写进依赖项</span><br><span class="line">npm i vue-i18n@8.18.1 --save</span><br></pre></td></tr></table></figure>

<h3 id="全局使用（公共部分及组件）"><a href="#全局使用（公共部分及组件）" class="headerlink" title="全局使用（公共部分及组件）"></a>全局使用（公共部分及组件）</h3><p>在项目的src目录下创建一个文件夹用来存放国际化相关的公共配置文件（我以<code>language</code>文件夹为例）</p>
<p>在<code>/src/language</code>文件夹中，新建三个文件：<code>index.js</code>、<code>en-config.json</code>、<code>zh-config.json</code></p>
<p>① <code>index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> VueI18n <span class="keyword">from</span> <span class="string">'vue-i18n'</span>;</span><br><span class="line"><span class="comment">// 公共翻译配置 - 中文</span></span><br><span class="line"><span class="keyword">import</span> zh <span class="keyword">from</span> <span class="string">'./zh-config'</span>;</span><br><span class="line"><span class="comment">// 公共翻译配置 - 英文</span></span><br><span class="line"><span class="keyword">import</span> en <span class="keyword">from</span> <span class="string">'./en-config'</span>;</span><br><span class="line">Vue.use(VueI18n);</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">const</span> sysLang = navigator.language.split(<span class="string">'-'</span>)[<span class="number">0</span>]; <span class="comment">// 获取当前系统首选语言</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> i18n = <span class="keyword">new</span> VueI18n(&#123;</span><br><span class="line">	locale: sysLang === <span class="string">'zh'</span> ? <span class="string">'zh'</span> : <span class="string">'en'</span>, <span class="comment">// 当前系统语言为中文（zh开头）时，显示中文，其他一律显示英文（业务需要）</span></span><br><span class="line">	fallbackLocale: <span class="string">'zh'</span>, <span class="comment">// 版本回退中文</span></span><br><span class="line">	messages: &#123;</span><br><span class="line">		zh,</span><br><span class="line">		en,</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>② <code>zh-config.json</code> 中文配置文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"info"</span>: &#123;</span><br><span class="line">		<span class="attr">"name"</span>: <span class="string">"名称"</span>,</span><br><span class="line">		<span class="attr">"sex"</span>: <span class="string">"性别"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>③ <code>en-config.json</code> 英文配置文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"info"</span>: &#123;</span><br><span class="line">		<span class="attr">"name"</span>: <span class="string">"name"</span>,</span><br><span class="line">		<span class="attr">"sex"</span>: <span class="string">"sex"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在项目入口文件 <code>main.js</code> 引入<code>vue-i18n</code>并实例化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; i18n &#125; <span class="keyword">from</span> <span class="string">'./language/index'</span>;</span><br><span class="line"><span class="comment">// 此处省略其他无关代码...</span></span><br><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    i18n,</span><br><span class="line">    <span class="comment">// 此处省略其他无关代码...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>全局使用，比如下面是某个组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- 姓名：张三 --&gt;</span><br><span class="line">    &lt;!-- name：张三 --&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; $t(&#39;info.name&#39;) &#125;&#125;: 张三&lt;&#x2F;p&gt; </span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

<p style="color: red;">注意：可以将公共组件、路由title（页面标题）等公共部分的翻译配置写在 /src/language 文件夹里面的全局配置文件中，其他非公共部分的语言配置，建议写在对应业务里，便于维护</p><p>

</p><h3 id="全局使用（路由以及页面导航标题）"><a href="#全局使用（路由以及页面导航标题）" class="headerlink" title="全局使用（路由以及页面导航标题）"></a>全局使用（路由以及页面导航标题）</h3><p>在<code>/src/language</code>目录下的 <code>en-config.json</code> 以及 <code>zh-config.json</code> 中，去配置路由相关的中英翻译。</p>
<p style="color: red;">注意：为了便于维护，区分这部分是路由的配置（可能该文件还有其他组件等一些全局的相关配置），所以将此部分配置写在“router”中，里面的层级对应的是路由文件所在的路径，比如下面这个，是一个在/router/school.js文件下的一条路由</p>

<p>① <code>zh-config.json</code> 中文配置文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"router"</span>: &#123;</span><br><span class="line">		<span class="attr">"school"</span>: &#123;</span><br><span class="line">		    <span class="attr">"home"</span>: <span class="string">"学校首页"</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>② <code>en-config.json</code> 英文配置文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"router"</span>: &#123;</span><br><span class="line">        <span class="attr">"school"</span>: &#123;</span><br><span class="line">            <span class="attr">"home"</span>: <span class="string">"Home Page"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在路由文件中加上convertKey关键字，这个key的value值对应的是全局翻译配置中的key值</p>
<p><code>/router/school.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     path: <span class="string">''</span>,</span><br><span class="line">     name: <span class="string">''</span>,</span><br><span class="line">     component: <span class="string">''</span>,</span><br><span class="line">     meta: &#123;</span><br><span class="line">         title: <span class="string">'学校首页'</span>,</span><br><span class="line">         convertKey: <span class="string">'router.school.home'</span>, <span class="comment">// 针对title进行中英转换时的配置key</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>main.js</code> 中进行路由监听，改变title</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    $route(to, <span class="keyword">from</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> metaTitle = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">if</span> (to.meta.convertKey) &#123;</span><br><span class="line">            <span class="comment">// 如果存在convertKey，说明当前title需要根据中英文环境进行显示</span></span><br><span class="line">            metaTitle = i18n.t(to.meta.convertKey);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.$bridge.setTitle(metaTitle || to.meta.title || <span class="string">''</span>); <span class="comment">// 这里是原生提供的一个设置手机屏幕导航栏title的桥方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="业务场景使用"><a href="#业务场景使用" class="headerlink" title="业务场景使用"></a>业务场景使用</h3><p>如果项目中需要国际化的内容不仅仅是固定的一些文字，比如不同的业务有不同的翻译配置，不仅仅是刚刚上面定义的那些，这时候我们就需要在业务里面写翻译配置文件了</p>
<p>比如我需要在我的业务文件<code>demo.vue</code>中使用国际化</p>
<p>那么在与<code>demo.vue</code>同级目录下新建两个业务翻译配置文件：</p>
<p>① <code>demo-en.json</code> 英文配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"demo"</span>: <span class="string">"demo"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>② <code>demo-zh.json</code> 中文配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"demo"</span>: <span class="string">"业务示例"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>③ <code>demo.vue</code> 在业务代码中追加业务翻译配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; $t(<span class="string">'demo'</span>) &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// 导入刚刚创建的两个业务翻译配置文件</span></span><br><span class="line"><span class="keyword">import</span> zhMap <span class="keyword">from</span> <span class="string">'./demo-zh'</span>;</span><br><span class="line"><span class="keyword">import</span> enMap <span class="keyword">from</span> <span class="string">'./demo-en'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    beforeCreate() &#123;</span><br><span class="line">        <span class="keyword">let</span> lang = <span class="keyword">this</span>.$i18n.locale; <span class="comment">// 获取当前语言</span></span><br><span class="line">        <span class="keyword">if</span> (lang === <span class="string">'zh'</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果是中文环境，则追加中文配置到当前语言环境</span></span><br><span class="line">            <span class="keyword">this</span>.$i18n.mergeLocaleMessage(lang, zhMap);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 反之 则一律追加英文</span></span><br><span class="line">            <span class="keyword">this</span>.$i18n.mergeLocaleMessage(lang, enMap);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$i18n.getLocaleMessage(lang)); <span class="comment">// 当前的语言翻译配置</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="comment">// methods中使用</span></span><br><span class="line">        testDemo() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$t(<span class="string">'demo'</span>));</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p style="color: red;">注意：业务翻译配置一经追加，可在其他任何页面中使用，因此可以将追加配置的逻辑写在业务相对外层的地方，前提是业务流程必须要经过这个vue文件再往下走。</p>

<h3 id="其他场景"><a href="#其他场景" class="headerlink" title="其他场景"></a>其他场景</h3><blockquote>
<p>后端接口返回数据如何根据前端环境进行切换？</p>
</blockquote>
<p>解决：在请求头中增加语言参数，告知后端返回何种类型语言</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">headers: &#123;</span><br><span class="line">    <span class="string">'Accept-Language'</span>: <span class="string">'en'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>由于中英文的文本长度不一致，基于中文开发的css样式，在切换成英文后，可能会造成样式扭曲（不适配），因此在不同的语言环境下，需要对样式进行调整？</p>
</blockquote>
<p>解决：在项目根目录下的<code>index.html</code>中的<code>body</code>里，专门添加一个<code>class</code>，用于语言类标识，然后在业务里写具体的样式。这里的语言标识类我设置为<code>lang-zh（中文标识类）</code>和<code>lang-cn（英文标识类）</code></p>
<p>步骤：</p>
<p>① 在项目入口文件 <code>main.js</code> 引入<code>vue-i18n</code>并实例化。上面已经进行了这个步骤，所以可以省略</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; i18n &#125; <span class="keyword">from</span> <span class="string">'./language/index'</span>;</span><br><span class="line"><span class="comment">// 此处省略其他无关代码...</span></span><br><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  i18n,</span><br><span class="line">  <span class="comment">// 此处省略其他无关代码...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>② 还是在项目入口文件 <code>main.js</code> 的<code>created</code>钩子中，给<code>body</code>加上当前语言环境对应的<code>class</code>标识</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">    <span class="keyword">let</span> bodyClassList = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>].classList, <span class="comment">// 获取当前body上的class集合（可能项目里有其他场景，也需要在body里添加样式，比如说设置主题色）</span></span><br><span class="line">        bodyClassArr = bodyClassList.value.split(<span class="string">' '</span>), <span class="comment">// 将body上的class放在数组里</span></span><br><span class="line">        removeClassName = <span class="string">''</span>;</span><br><span class="line">    bodyClassArr.forEach(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 如果body里已经有语言标识的类，需要先标记，移除。必须保证lang-zh、lang-en只能同时存在一个</span></span><br><span class="line">        <span class="keyword">if</span> (i.indexOf(<span class="string">'lang-'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">            removeClassName = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (removeClassName) &#123;</span><br><span class="line">        bodyClassList.remove(removeClassName); <span class="comment">// 移除，重置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加当前的语言标识类</span></span><br><span class="line">    bodyClassList.add(<span class="string">`lang-<span class="subst">$&#123;i18n.locale&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>③ 在业务里再添加一个<code>style</code>标签，专门放中英文兼容的这部分样式（便于维护），并且必须使用上面定义好的<code>lang-zh</code>、<code>lang-en</code>将样式包起来。使用如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;style lang="less" scoped&gt;</span><br><span class="line"> <span class="selector-class">.lang-en</span> &#123;</span><br><span class="line">     <span class="comment">// 英文环境对应样式</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.lang-zh</span> &#123;</span><br><span class="line">     <span class="comment">// 中文环境对应样式</span></span><br><span class="line"> &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>国际化</category>
      </categories>
  </entry>
  <entry>
    <title>对象的灵活扩展&amp;ES6扩展运算符</title>
    <url>/2020/11/13/%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%81%B5%E6%B4%BB%E6%89%A9%E5%B1%95-ES6%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h3 id="向对象中添加属性-or-合并对象"><a href="#向对象中添加属性-or-合并对象" class="headerlink" title="向对象中添加属性 or 合并对象"></a>向对象中添加属性 or 合并对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向scores中添加frank的属性</span></span><br><span class="line"><span class="keyword">const</span> frank = &#123; <span class="attr">id_frank</span>:<span class="number">100</span>, <span class="attr">name_frank</span>:<span class="string">'Frank'</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> scores = &#123; ...frank, <span class="attr">EN</span>:<span class="number">120</span>, <span class="attr">CN</span>:<span class="number">118</span> &#125;; <span class="comment">// &#123; id_frank:100, name_frank:'Frank', EN:120, CN:118 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加条件属性，当password存在的时候才会添加 password</span></span><br><span class="line"><span class="keyword">const</span> password = <span class="string">'Password!'</span></span><br><span class="line"><span class="keyword">const</span> frankWithRealPassword = &#123;</span><br><span class="line">  ...frank,</span><br><span class="line">  ...(password &amp;&amp; &#123; password &#125;)</span><br><span class="line">&#125; <span class="comment">// &#123; id_frank:100, name_frank:'Frank', password: 'Password!' &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并 frank &amp; lucy 到 user 中</span></span><br><span class="line"><span class="keyword">const</span> lucy = &#123; <span class="attr">id_lucy</span>:<span class="number">101</span>, <span class="attr">name_lucy</span>:<span class="string">'lucy'</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> user = &#123; ...frank, ...lucy &#125;; <span class="comment">// &#123;id_frank: 100, name_frank: "Frank", id_lucy: 101, name_lucy: "lucy"&#125;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="删除对象属性（去掉user中的password）"><a href="#删除对象属性（去掉user中的password）" class="headerlink" title="删除对象属性（去掉user中的password）"></a>删除对象属性（去掉user中的password）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数中的rest不是固定名词，可改，但是必须要将...rest操作符放在参数的最后一位，否则会报错</span></span><br><span class="line"><span class="keyword">const</span> noPassword = <span class="function">(<span class="params">&#123; password, ...rest &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> rest;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  id: <span class="number">100</span>,</span><br><span class="line">  name: <span class="string">'coffe1891'</span>,</span><br><span class="line">  password: <span class="string">'Password!'</span></span><br><span class="line">&#125;</span><br><span class="line">noPassword(user); <span class="comment">// &#123; id: 100, name: 'coffe1891' &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="从对象中删除一个或多个属性，将剩余的属性组成一个新的对象"><a href="#从对象中删除一个或多个属性，将剩余的属性组成一个新的对象" class="headerlink" title="从对象中删除一个或多个属性，将剩余的属性组成一个新的对象"></a>从对象中删除一个或多个属性，将剩余的属性组成一个新的对象</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const obj &#x3D; &#123; a: 11, b: 22, c: 33, d: 44 &#125;;</span><br><span class="line">const &#123;c, d, ...rest&#125; &#x3D; obj;</span><br><span class="line">const objNew &#x3D; &#123;...rest&#125;;</span><br><span class="line">console.log(objNew); &#x2F;&#x2F; &#123;a: 11, b: 22&#125;</span><br></pre></td></tr></table></figure>

<h3 id="从对象中取出指定的若干属性，组成一个新的对象"><a href="#从对象中取出指定的若干属性，组成一个新的对象" class="headerlink" title="从对象中取出指定的若干属性，组成一个新的对象"></a>从对象中取出指定的若干属性，组成一个新的对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法定义</span></span><br><span class="line">cleanData(obj, keyArr) &#123;</span><br><span class="line">	<span class="keyword">return</span> keyArr.reduce( <span class="function">(<span class="params">res, key</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> ( obj.hasOwnProperty(key) ) &#123;</span><br><span class="line">			res[key] = obj[key];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;, &#123;&#125;); <span class="comment">// 注意这个&#123;&#125;，reduce的第二个参数,是对res的初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>, <span class="attr">d</span>:<span class="number">4</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(cleanData(obj, [<span class="string">'a'</span>, <span class="string">'c'</span>])); <span class="comment">// &#123;a:1, c:2&#125;</span></span><br></pre></td></tr></table></figure>

<p><code>reduce()</code>是数组的归并方法，与<code>forEach()、map()、filter()</code>等迭代方法一样都会对数组每一项进行遍历，但是<code>reduce()</code>可同时将前面数组项遍历产生的结果与当前遍历项进行运算</p>
<p>如果为了方便的话，比如obj就几个属性，可以直接用下面这种es6的扩展运算</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let obj &#x3D; &#123;a:1, b:2, c:3, d:4&#125;;</span><br><span class="line">const &#123;a,c&#125; &#x3D; obj;</span><br><span class="line">const objNew &#x3D; &#123;a,c&#125;;</span><br><span class="line">console.log(objNew); &#x2F;&#x2F; &#123;a:1, c:3&#125;</span><br></pre></td></tr></table></figure>

<h3 id="将对象的key值抽出来组成一个新数组"><a href="#将对象的key值抽出来组成一个新数组" class="headerlink" title="将对象的key值抽出来组成一个新数组"></a>将对象的key值抽出来组成一个新数组</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let person &#x3D; &#123;</span><br><span class="line">    name: &#39;张三&#39;,</span><br><span class="line">    age: 18,</span><br><span class="line">    66: &#39;66&#39;,</span><br><span class="line">    2: &#39;2&#39;</span><br><span class="line">&#125;;</span><br><span class="line">console.log(Object.keys(person)); &#x2F;&#x2F; [&#39;2&#39;, &#39;66&#39;, &#39;name&#39;, &#39;age&#39;]</span><br></pre></td></tr></table></figure>

<p>类似的还有<code>Object.values()</code></p>
<h3 id="对象属性重命名"><a href="#对象属性重命名" class="headerlink" title="对象属性重命名"></a>对象属性重命名</h3><p>原理：先解构对应的属性，再将属性以新的命名添加进去</p>
<p>举例: 比如讲user中的ID改为小写id</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> renamed = <span class="function">(<span class="params">&#123;ID, ...obj&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        id: ID,</span><br><span class="line">        ...obj,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    ID: <span class="number">123</span>,</span><br><span class="line">    name: <span class="string">'xsad'</span>,</span><br><span class="line">    years: <span class="string">'12'</span>,</span><br><span class="line">&#125;</span><br><span class="line">renamed(user); <span class="comment">// &#123;id: '123', name: 'xsad', years: '12'&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ES6</category>
      </categories>
  </entry>
  <entry>
    <title>小程序(uni)在页面传参时布尔值失效的问题</title>
    <url>/2020/06/05/%E5%B0%8F%E7%A8%8B%E5%BA%8F-uni-%E5%9C%A8%E9%A1%B5%E9%9D%A2%E4%BC%A0%E5%8F%82%E6%97%B6%E5%B8%83%E5%B0%94%E5%80%BC%E5%A4%B1%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在开发过程中发现了一个不太起眼但很重要的问题，也是踩坑踩过来的。先看下面这段小程序A页面传值到B页面的代码</p>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A页面</span></span><br><span class="line">methods: &#123;</span><br><span class="line">    viewB() &#123;</span><br><span class="line">        <span class="keyword">let</span> id = <span class="string">'123'</span>,</span><br><span class="line">            isHide = <span class="literal">true</span>,</span><br><span class="line">        uni.navigateTo(&#123;</span><br><span class="line">            url: <span class="string">'/pages/demo/b?id='</span> + id + <span class="string">'&amp;isHide='</span> isHide,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// B页面 接收值</span></span><br><span class="line">onLoad(e) &#123;</span><br><span class="line">    <span class="keyword">this</span>.isHide = e.isHide;</span><br><span class="line">    <span class="keyword">this</span>.id = e.id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看起来没什么问题，传参有两个，字符传类型<code>id</code> 和 布尔值类型<code>isHide</code>。在B页面的onLoad周期中也能正常接收到这两个值。</p>
<p>因为<code>isHide</code>是A页面去控制B页面的按钮是否显示的，但是在B页面中发现无论<code>isHide</code>是<code>true</code>还是<code>false</code>，都无法正常控制按钮的显示与隐藏</p>
<p>仔细排查确认代码没写错之后，<strong>在小程序调试工具中偶然发现A页面带过来的布尔类型<code>isHide</code>，到了B页面却莫名其妙的变成了字符串类型</strong></p>
<p>也就是说，在A页面 <code>isHide: true;</code> 但是在B页面 <code>isHide: &#39;true&#39;</code>;</p>
<p>初步猜想是url传参的时候，布尔值被转成了字符串，所以我又尝试了以对象的形式去传参，如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A页面</span></span><br><span class="line">methods: &#123;</span><br><span class="line">    viewB() &#123;</span><br><span class="line">        <span class="keyword">let</span> params: &#123;</span><br><span class="line">            id: <span class="string">'123'</span>,</span><br><span class="line">            isHide: <span class="literal">true</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        uni.navigateTo(&#123;</span><br><span class="line">            url: <span class="string">'/pages/demo/b?params='</span> + <span class="built_in">encodeURIComponent</span>(<span class="built_in">JSON</span>.stringify(params)),</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// B页面 接收值</span></span><br><span class="line">onLoad(e) &#123;</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="built_in">JSON</span>.parse(<span class="built_in">decodeURIComponent</span>(e.params));</span><br><span class="line">    <span class="keyword">this</span>.isHide = obj.isHide; <span class="comment">// 这里拿到的isHide不会被转成字符串</span></span><br><span class="line">    <span class="keyword">this</span>.id = obj.id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样页面就正常了</p>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
  </entry>
  <entry>
    <title>关于换行的3个css属性</title>
    <url>/2020/10/10/%E5%85%B3%E4%BA%8E%E6%8D%A2%E8%A1%8C%E7%9A%843%E4%B8%AAcss%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<blockquote>
<p>white-space 控制空白字符的显示，同时还能控制是否自动换行</p>
</blockquote>
<p>可选值：<code>normal | nowrap | pre | pre-wrap | pre-line</code></p>
<blockquote>
<p>word-break 控制单词如何被拆分换行</p>
</blockquote>
<p>可选值：<code>normal | break-all | keep-all</code></p>
<blockquote>
<p>word-wrap（overflow-wrap）控制长度超过一行的单词是否被拆分换行</p>
</blockquote>
<p>可选值：<code>normal | break-word</code></p>
<h4 id="文本超长显示省略号"><a href="#文本超长显示省略号" class="headerlink" title="文本超长显示省略号"></a>文本超长显示省略号</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.text-overflow</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：容器的<code>width</code>或者<code>max-width</code>必须有具体的值</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
  </entry>
  <entry>
    <title>小程序(基于uni)常用的应用生命周期&amp;页面生命周期</title>
    <url>/2020/05/11/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%9F%BA%E4%BA%8Euni-%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-%E9%A1%B5%E9%9D%A2%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<blockquote>
<p>常用应用生命周期</p>
</blockquote>
<a id="more"></a>

<table>
<thead>
<tr>
<th align="left">函数名</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">onLaunch</td>
<td align="left">当uni-app 初始化完成时触发（全局只触发一次）</td>
</tr>
<tr>
<td align="left">onShow</td>
<td align="left">当 uni-app 启动，或从后台进入前台显示</td>
</tr>
<tr>
<td align="left">onHide</td>
<td align="left">当 uni-app 从前台进入后台</td>
</tr>
<tr>
<td align="left">onError</td>
<td align="left">当 uni-app 报错时触发</td>
</tr>
</tbody></table>
<ul>
<li>应用生命周期仅可在App.vue中监听，在其它页面监听无效</li>
<li>调用顺序：onLaunch &gt; onShow &gt; onHide</li>
</ul>
<blockquote>
<p>常用页面生命周期</p>
</blockquote>
<p>详见uni官方文档</p>
<ul>
<li>当每进入/切换到一个新的页面的时候，就会调用页面生命周期函数</li>
<li>调用顺序：onLoad &gt; onReady &gt; onShow &gt; onHide</li>
</ul>
<p>参考来源：<br><em><a href="https://www.jianshu.com/p/3f43eaa83bbd" target="_blank" rel="noopener">https://www.jianshu.com/p/3f43eaa83bbd</a></em></p>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
  </entry>
  <entry>
    <title>微信小程序(uni)拍照或选取相册图片进行上传、图片预览</title>
    <url>/2020/06/13/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-uni-%E6%8B%8D%E7%85%A7%E6%88%96%E9%80%89%E5%8F%96%E7%9B%B8%E5%86%8C%E5%9B%BE%E7%89%87%E8%BF%9B%E8%A1%8C%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<p>如题，记录一下相关api使用方法，对一些值的处理需要注意</p>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 拍照或从相册选择图片</span></span><br><span class="line">takePhoto() &#123;</span><br><span class="line">    uni.chooseImage(&#123;</span><br><span class="line">        count: <span class="number">1</span>, <span class="comment">// 默认9，1为只能选择单张上传</span></span><br><span class="line">        success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> pic = res.tempFilePaths;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'图片本地临时路径：'</span>, pic[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">this</span>.uploadPic(pic[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上传本地资源到服务器</span></span><br><span class="line">uploadPic(file) &#123;</span><br><span class="line">    uni.uploadFile(&#123;</span><br><span class="line">        url: <span class="string">'自己的上传图片的接口url'</span>,</span><br><span class="line">        fileType: <span class="string">'image'</span>,</span><br><span class="line">        filePath: file,</span><br><span class="line">        name: <span class="string">'file'</span>,</span><br><span class="line">        formData: &#123; <span class="comment">// 自己这边的上传接口传参</span></span><br><span class="line">            file: file,</span><br><span class="line">            token: uni.getStorageSync(<span class="string">'token'</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">        success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> r = <span class="built_in">JSON</span>.parse(res.data); <span class="comment">// 注意这里uploadFile返回的结果是字符串，需要转成对象</span></span><br><span class="line">            <span class="comment">// 后续的业务操作...</span></span><br><span class="line">        &#125;,</span><br><span class="line">        fail: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            uni.showToast(&#123;  </span><br><span class="line">                title: <span class="string">'图片上传错误'</span>,  </span><br><span class="line">                duration: <span class="number">2000</span>,</span><br><span class="line">                icon: <span class="string">'none'</span>,</span><br><span class="line">            &#125;);  </span><br><span class="line">        &#125;,</span><br><span class="line">        complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>图片预览，单张为例</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">showPic(url) &#123;</span><br><span class="line">    if (!url) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    uni.previewImage(&#123;</span><br><span class="line">        current: 0,</span><br><span class="line">        urls: [url],</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>小程序</category>
      </categories>
  </entry>
  <entry>
    <title>小程序嵌H5页面流程以及互相传参逻辑</title>
    <url>/2020/06/06/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%B5%8CH5%E4%BC%A0%E5%8F%82/</url>
    <content><![CDATA[<h3 id="小程序嵌H5页面流程"><a href="#小程序嵌H5页面流程" class="headerlink" title="小程序嵌H5页面流程"></a>小程序嵌H5页面流程</h3><p>将H5页面对应的域名配置到小程序后台的业务域名中。举个例子，如果H5的url是<code>https://www.baidu.com/news/list</code>，那就需要把<code>https://www.baidu.com</code>加入配置名单中，如下图所示：</p>
<p><img src="/2020/06/06/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%B5%8CH5%E4%BC%A0%E5%8F%82/com.jpg" alt="业务域名"></p>
<p>注意必须要把小程序提供的校验文件放在H5域名服务器根目录下之后，才能添加域名配置，点击上图中的修改会弹出下图，按提示操作即可。</p>
<p><img src="/2020/06/06/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%B5%8CH5%E4%BC%A0%E5%8F%82/com2.jpg" alt="校验文件"></p>
<p>保存成功以后，在微信开发者工具右上角的详情中，可以看到项目配置里面的webview域名已经更新了</p>
<p><img src="/2020/06/06/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%B5%8CH5%E4%BC%A0%E5%8F%82/com3.jpg" alt="微信开发者工具"></p>
<a id="more"></a>

<p>在小程序页面中，添加<code>webview</code>组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 小程序页面，url就是要访问H5的url --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-view</span> <span class="attr">src</span>=<span class="string">"url"</span> <span class="attr">bindmessage</span>=<span class="string">"getH5Msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">web-view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="小程序向H5传参（目前只能通过url向H5传递参数）"><a href="#小程序向H5传参（目前只能通过url向H5传递参数）" class="headerlink" title="小程序向H5传参（目前只能通过url向H5传递参数）"></a>小程序向H5传参（目前只能通过url向H5传递参数）</h3><p>举个例子，我这里项目的url格式是下面这样子的：前半部分固定路径 + 传参 + 业务路由</p>
<p><code>https://xxxxx.com/demo/index.html?access_token={access_token}&amp;id={id}#/school/grade4/class4</code></p>
<p><code>？</code>后的是传参，<code>#</code>后的是业务路由</p>
<p>这里小程序给H5传了两个参数，<code>access_token</code> 和 <code>id</code></p>
<p>H5获取参数如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// H5页面接收参数（项目用的是vue框架）</span></span><br><span class="line">created() &#123;</span><br><span class="line">    <span class="keyword">let</span> id = <span class="keyword">this</span>.getKey(<span class="string">'id'</span>);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"> &#125;,</span><br><span class="line"> methods: &#123;</span><br><span class="line">    <span class="comment">// 获取小程序请求url中的传参</span></span><br><span class="line">    getKey(key) &#123;</span><br><span class="line">      <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + key + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>),</span><br><span class="line">          r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg);</span><br><span class="line">      <span class="keyword">if</span> (r !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(r[<span class="number">2</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="H5向小程序传参（小程序通过-bindmessage-绑定的方法监听）"><a href="#H5向小程序传参（小程序通过-bindmessage-绑定的方法监听）" class="headerlink" title="H5向小程序传参（小程序通过 bindmessage 绑定的方法监听）"></a>H5向小程序传参（小程序通过 bindmessage 绑定的方法监听）</h3><p>首先在vue项目的index.html中引入微信的JSSDK文件（版本可以不一样）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://res.wx.qq.com/open/js/jweixin-1.6.0.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>引入之后便可通过<code>wx.miniProgram.xxx</code>使用微信提供的相关api</p>
<ul>
<li>比如调用<code>wx.miniProgram.getEnv</code>接口来判断是否在web-view环境</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.miniProgram.getEnv(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.miniprogram) <span class="comment">// true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>通过<code>wx.miniProgram.postMessage()</code>传递数据到小程序，调用后会在小程序触发<code>bindmessage</code>的监听</p>
</li>
<li><p>通过<code>wx.miniProgram.navigateTo({url: &#39;...&#39;})</code>可以直接从当前web-view跳转到小程序的其他页面</p>
</li>
</ul>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
  </entry>
  <entry>
    <title>微信小程序(uni)通过地图选择地址、根据地址查看地图(进行导航)</title>
    <url>/2020/06/18/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-uni-%E9%80%9A%E8%BF%87%E5%9C%B0%E5%9B%BE%E9%80%89%E6%8B%A9%E5%9C%B0%E5%9D%80%E3%80%81%E6%A0%B9%E6%8D%AE%E5%9C%B0%E5%9D%80%E6%9F%A5%E7%9C%8B%E5%9C%B0%E5%9B%BE-%E8%BF%9B%E8%A1%8C%E5%AF%BC%E8%88%AA/</url>
    <content><![CDATA[<blockquote>
<p>通过地图选择地址</p>
</blockquote>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 选择地址</span></span><br><span class="line">getAddressByMap() &#123;</span><br><span class="line">    uni.authorize(&#123;</span><br><span class="line">        scope: <span class="string">'scope.userLocation'</span>, <span class="comment">// 查询该权限项是否已开启</span></span><br><span class="line">        success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 成功获取授权，调用获取位置api</span></span><br><span class="line">            uni.chooseLocation(&#123;</span><br><span class="line">                success:<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'位置名称：'</span> + r.name);</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'详细地址：'</span> + r.address);</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'纬度：'</span> + r.latitude);</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'经度：'</span> + r.longitude);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        fail: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 如果用户没有授权过或者拒绝了获取地理位置的权限，会走到这里</span></span><br><span class="line">            uni.showModal(&#123;</span><br><span class="line">                title: <span class="string">'温馨提示'</span>,</span><br><span class="line">                content: <span class="string">'您尚未开启定位,请先开启'</span>,</span><br><span class="line">                confirmText: <span class="string">'去设置'</span>,</span><br><span class="line">                success(res)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (res.confirm) &#123;</span><br><span class="line">                        <span class="comment">//打开授权设置</span></span><br><span class="line">                        uni.openSetting(&#123;</span><br><span class="line">                          success: <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">                            <span class="built_in">console</span>.log(r.authSetting);</span><br><span class="line">                          &#125;,</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            </span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>思路：</p>
<p>一定要先使用<code>authorize</code>查询是否授权，如果不这样做，直接使用<code>chooseLocation</code>，会有一种情况就是假如用户第一次拒绝了权限申请，那么后面便无法再次触发<code>chooseLocation</code></p>
<p>所以使用了<code>authorize</code>查询授权情况后，如果用户授权，便调用<code>chooseLocation</code>；如果用户没有授权，便提示让用户先去开启获取地理位置权限项</p>
<p>在<code>openSetting</code>（即让用户去开启权限项）之前，有两个步骤需要做：</p>
<ol>
<li><p>一定要加上<code>showModal</code>，询问用户是否要去开启权限项，只有用户主动调用，<code>openSetting</code>才会正常打开，否则，直接调用的话将没有任何反应</p>
</li>
<li><p>创建app.json，加上权限选择配置，如下：</p>
</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"permission"</span>: &#123;</span><br><span class="line">	  <span class="attr">"scope.userLocation"</span>: &#123;</span><br><span class="line">	    <span class="attr">"desc"</span>: <span class="string">"你的位置信息将用于小程序位置接口的效果展示"</span></span><br><span class="line">	  &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>根据地址查看地图(进行导航)，以腾讯地图为例</p>
</blockquote>
<p>准备：腾讯地图的jssdk 和 地图密钥</p>
<p>先使用jssdk，查询地址对应的经纬度相应信息，然后将经纬度传给uni提供的api： <code>openLocation</code>即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> QQMap <span class="keyword">from</span> <span class="string">'./qqmap-wx-jssdk.js'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            mapsdk: <span class="literal">null</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    onLoad(e) &#123;</span><br><span class="line">        <span class="comment">// 实例化 腾讯地图构造函数</span></span><br><span class="line">        <span class="keyword">this</span>.mapsdk = <span class="keyword">new</span> QQMapWX(&#123;</span><br><span class="line">            key: <span class="string">'申请的密钥'</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="comment">// 在地图中查看地址</span></span><br><span class="line">        addressInMap() &#123;</span><br><span class="line">            <span class="keyword">this</span>.mapsdk.geocoder(&#123;</span><br><span class="line">                address: <span class="string">'地址：如广东省深圳市深圳大学'</span>,</span><br><span class="line">                success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">// 调起地图</span></span><br><span class="line">                    wx.openLocation(&#123;</span><br><span class="line">                        latitude: res.result.location.lat,</span><br><span class="line">                        longitude: res.result.location.lng,</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;,</span><br><span class="line">                fail: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">// 这里是防止地址不合法，怕查不到对应经纬度，提示一下用户</span></span><br><span class="line">                    uni.showToast(&#123;</span><br><span class="line">                        title: <span class="string">'无法定位到该地址，请检查地址准确性'</span>,</span><br><span class="line">                        icon: <span class="string">'none'</span>,</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>小程序</category>
      </categories>
  </entry>
  <entry>
    <title>每天一道小心机：for循环将接口多个字段push进数组</title>
    <url>/2020/05/20/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93%E5%B0%8F%E5%BF%83%E6%9C%BA%EF%BC%9Afor%E5%BE%AA%E7%8E%AF%E5%B0%86%E6%8E%A5%E5%8F%A3%E5%A4%9A%E4%B8%AA%E5%AD%97%E6%AE%B5push%E8%BF%9B%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<blockquote>
<p>场景：接口将1~12个月份对应的值用12个字段返回，这12个字段长这样：<code>field1、field2 ... field12</code>，但前端想要将12个字段组装为一个数组去循环生成相应元素，怎么做？</p>
</blockquote>
<a id="more"></a>

<p>json数据：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  field1: '12',</span><br><span class="line">  field2: '2',</span><br><span class="line">  field3: '36',</span><br><span class="line">  <span class="comment">// ... 中间省略</span></span><br><span class="line">  field12: '324'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">12</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> fieldIndex = <span class="string">'field'</span> + (i + <span class="number">1</span>); <span class="comment">// 加上1是因为接口字段从field1开始，没有field0</span></span><br><span class="line">    arr.push(data[fieldIndex]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：push的时候不能直接用<code>data.fieldIndex</code>，这样写实际上js会读取data里面叫<code>fieldIndex</code>变量的值，但在情境中<code>fieldIndex</code>是动态值，因此只能用<code>data[fieldIndex]</code>的方式去访问，又是一个小细节-。-</p>
]]></content>
      <categories>
        <category>每天一道小心机</category>
      </categories>
  </entry>
  <entry>
    <title>总结一些git日常使用命令</title>
    <url>/2020/08/05/%E6%80%BB%E7%BB%93%E4%B8%80%E4%BA%9Bgit%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>日常使用的git命令，记录下</p>
<a id="more"></a>

<h3 style="color: #FF4500;">创建新分支（基于远程分支）</h3>

<blockquote>
<p>基于远程release分支新创建自己的release-bibifeng分支</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout release &#x2F;&#x2F; 切换到release分支</span><br><span class="line">git checkout -b release-bibifeng &#x2F;&#x2F; 创建自己的分支</span><br><span class="line">git push --set-upstream origin release-bibifeng &#x2F;&#x2F; 推到远程仓库并且将本地分支与远程分支关联起来</span><br></pre></td></tr></table></figure>

<h3 style="color: #FF4500;">自己的私人分支merge到公共分支有冲突时</h3>

<blockquote>
<p>以自己分支release-bibifeng 合并到 dev 分支为例</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout dev</span><br><span class="line">git pull &#x2F;&#x2F; 更新分支</span><br><span class="line">git merge --no-ff release-bibifeng</span><br><span class="line">&#x2F;&#x2F; 解决冲突...</span><br><span class="line">git add .</span><br><span class="line">git commit -m &#39;commit message&#39;</span><br><span class="line">git push origin dev</span><br></pre></td></tr></table></figure>

<h3 style="color: #FF4500;">更新自己的分支以达到与远程分支同步时的操作，即rebase</h3>

<blockquote>
<p>更新远程主分支release到自己的分支release-bibifeng为例</p>
</blockquote>
<p>场景：这里的release-bibifeng是从release拉下来的，但是同时别人也有他自己的分支（也是从release拉下来的），那么大家都会合代码到release分支，一段时间后，远程的分支代码和自己的分支代码就会有差异了，这时候就要定时把远程release分支更新到自己的分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout release &#x2F;&#x2F; 切换并更新本地的release分支</span><br><span class="line">git pull</span><br><span class="line">git checkout release-bibifeng &#x2F;&#x2F; 切换到自己的分支</span><br><span class="line">git pull origin release-bibifeng --rebase</span><br><span class="line">git rebase release &#x2F;&#x2F; 同步release到自己的分支</span><br><span class="line">&#x2F;&#x2F; 解决冲突（如需要）</span><br><span class="line">git push &#x2F;&#x2F; 更新自己的远程分支</span><br></pre></td></tr></table></figure>

<p>用rebase有时候会需要多次fix冲突，注意按照提示去操作，解决冲突之后执行<br>git add .<br>git rebase –continue （这个时候rebase会继续，如果是没有改动的情况，按提示输入git rebase –skip继续执行合并）<br>这里解决冲突和 continue/skip 动作可能会执行多次，直到结束之后，提交到远程</p>
<h3 style="color: #FF4500;">代码回退的两种方式</h3>

<blockquote>
<p>git reset 如果想恢复到之前某个提交的版本，且那个版本之后提交的版本我们都不要了，就可以用这种方法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset --hard 目标版本号id</span><br><span class="line">git push -f</span><br></pre></td></tr></table></figure>

<blockquote>
<p>git revert 撤销某一版本的修改,不影响该版本后的提交版本。只单独撤销某一版本，这种改动实质上是“反做”之前的那条提交记录，并生成一条新的记录重新提交上去。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git revert -n xxx版本id</span><br><span class="line">&#x2F;&#x2F; 若有冲突，先手动解决，然后add、commit、push三刀流</span><br></pre></td></tr></table></figure>

<h3 style="color: #FF4500;">删除分支（本地、远程）</h3>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch -r &#x2F;&#x2F; 仅查看远程分支</span><br><span class="line">git branch -a &#x2F;&#x2F; 查看所有分支</span><br><span class="line">git push origin --delete xxx分支名 &#x2F;&#x2F; 删除远程分支</span><br><span class="line">git branch -D xxx分支名 &#x2F;&#x2F; 删除本地分支</span><br></pre></td></tr></table></figure>

<p>删除分支时，本地和远程互不影响</p>
<h3 style="color: #FF4500;">重命名自己的分支</h3>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 删除远程分支（以下均为按需操作）</span><br><span class="line">git push --delete origin release-bibifeng</span><br><span class="line">&#x2F;&#x2F; 重命名本地分支</span><br><span class="line">git branch -m release-bibifeng release-old</span><br><span class="line">&#x2F;&#x2F; 将新命名的分支推到远程</span><br><span class="line">git push origin release-old</span><br><span class="line">&#x2F;&#x2F; 本地分支关联远程分支</span><br><span class="line">git branch --set-upstream-to&#x3D;origin&#x2F;release-old</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>解决uni微信小程序在onShareAppMessage中分享传参无法按预设的url传参进行的问题</title>
    <url>/2020/08/10/%E8%A7%A3%E5%86%B3uni%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%9C%A8onShareAppMessage%E4%B8%AD%E5%88%86%E4%BA%AB%E4%BC%A0%E5%8F%82%E6%97%A0%E6%B3%95%E6%8C%89%E9%A2%84%E8%AE%BE%E7%9A%84url%E4%BC%A0%E5%8F%82%E8%BF%9B%E8%A1%8C%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>问题复现：在进行页面分享相关业务开发时，使用了微信提供的<code>onShareAppMessage</code>的API，其中在预设了<code>path</code>之后，意外的发现无论url后面的传参值怎么变，分享出去之后的url都是默认url，与自己预设的path值不一样</p>
</blockquote>
<a id="more"></a>

<p>一番查找，发现了一个问题。由于我需要在分享时去判断一个接口返回值，从而动态的去改变需要在分享的url中的参数，所以我在<code>onShareAppMessage</code>中使用了promise，期待等接口请求完再生成分享链接</p>
<p>但是事实上，<code>onShareAppMessage</code>是官方已经封装好的，里面并不支持进行同步操作，即使用了promise或者是使用了async、await，虽然代码会按正常顺序执行，但最终分享出去的url，始终都是页面默认url，这与<code>onShareAppMessage</code>内部实现有关</p>
<p>解决办法：将分享时需要的那个接口返回值，提前进行请求（我放在了页面一进来时候去请求），这样在<code>onShareAppMessage</code>就可以直接拿来用，而不用再进行同步接口请求了</p>
<p>去掉了<code>onShareAppMessage</code>中的promise，分享出去的path中的url传参就是正常我们预定义的了</p>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
  </entry>
</search>
